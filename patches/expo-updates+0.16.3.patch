diff --git a/node_modules/expo-updates/build/Updates.types.d.ts b/node_modules/expo-updates/build/Updates.types.d.ts
index d21c94c..5d904b2 100644
--- a/node_modules/expo-updates/build/Updates.types.d.ts
+++ b/node_modules/expo-updates/build/Updates.types.d.ts
@@ -168,5 +168,27 @@ export declare enum UpdatesLogEntryLevel {
  * @hidden
  */
 export type LocalAssets = Record<string, string>;
+/**
+ * Updates info structure provided by UpdatesProvider.
+ */
+export type UpdatesInfo = {
+    /**
+     * The manifest for the currently running update.
+     */
+    currentlyRunning: Partial<Manifest>;
+    /**
+     * If a new available update has been found, either by using checkForUpdate(), or by the UpdateEvent listener in useUpdates(),
+     * this will contain the manifest for that update.
+     */
+    updateAvailable?: Partial<Manifest>;
+    /**
+     * True if the application is running the embedded bundle and not a downloaded update.
+     */
+    embedded: boolean;
+    /**
+     * If an error is returned by the UpdateEvent listener, the error description will appear here.
+     */
+    error?: string;
+};
 export {};
 //# sourceMappingURL=Updates.types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.types.d.ts.map b/node_modules/expo-updates/build/Updates.types.d.ts.map
index 1bf0076..c428715 100644
--- a/node_modules/expo-updates/build/Updates.types.d.ts.map
+++ b/node_modules/expo-updates/build/Updates.types.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Updates.types.d.ts","sourceRoot":"","sources":["../src/Updates.types.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC;;GAEG;AACH,oBAAY,eAAe;IACzB;;;;OAIG;IACH,gBAAgB,oBAAoB;IACpC;;OAEG;IACH,mBAAmB,sBAAsB;IACzC;;OAEG;IACH,KAAK,UAAU;CAChB;AAID;;GAEG;AACH,MAAM,MAAM,eAAe,GAAG,OAAO,SAAS,CAAC,QAAQ,CAAC;AAGxD;;GAEG;AACH,MAAM,MAAM,QAAQ,GAAG,eAAe,GAAG,OAAO,SAAS,CAAC,SAAS,CAAC;AAIpE;;GAEG;AACH,KAAK,wBAAwB,GAAG;IAC9B;;OAEG;IACH,WAAW,EAAE,IAAI,CAAC;IAClB;;OAEG;IACH,QAAQ,EAAE,QAAQ,CAAC;CACpB,CAAC;AAEF;;GAEG;AACH,KAAK,wBAAwB,GAAG;IAC9B;;OAEG;IACH,WAAW,EAAE,KAAK,CAAC;IACnB;;OAEG;IACH,QAAQ,EAAE,SAAS,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iBAAiB,GAAG,wBAAwB,GAAG,wBAAwB,CAAC;AAEpF;;GAEG;AACH,KAAK,wBAAwB,GAAG;IAC9B;;;OAGG;IACH,KAAK,EAAE,IAAI,CAAC;IACZ;;OAEG;IACH,QAAQ,EAAE,QAAQ,CAAC;CACpB,CAAC;AAEF;;GAEG;AACH,KAAK,wBAAwB,GAAG;IAC9B;;OAEG;IACH,KAAK,EAAE,KAAK,CAAC;IACb;;OAEG;IACH,QAAQ,EAAE,SAAS,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iBAAiB,GAAG,wBAAwB,GAAG,wBAAwB,CAAC;AAEpF;;GAEG;AACH,MAAM,MAAM,WAAW,GAAG;IACxB;;OAEG;IACH,IAAI,EAAE,eAAe,CAAC;IACtB;;;OAGG;IACH,QAAQ,CAAC,EAAE,QAAQ,CAAC;IACpB;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,eAAe,GAAG;IAC5B;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAChB;;OAEG;IACH,IAAI,EAAE,mBAAmB,CAAC;IAC1B;;OAEG;IACH,KAAK,EAAE,oBAAoB,CAAC;IAC5B;;OAEG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,UAAU,CAAC,EAAE,MAAM,EAAE,CAAC;CACvB,CAAC;AAEF;;GAEG;AACH,oBAAY,mBAAmB;IAC7B,IAAI,SAAS;IACb,oBAAoB,uBAAuB;IAC3C,2BAA2B,6BAA6B;IACxD,yBAAyB,4BAA4B;IACrD,4BAA4B,8BAA8B;IAC1D,yBAAyB,2BAA2B;IACpD,qBAAqB,uBAAuB;IAC5C,qBAAqB,uBAAuB;IAC5C,gBAAgB,mBAAmB;IACnC,OAAO,YAAY;CACpB;AAED;;GAEG;AACH,oBAAY,oBAAoB;IAC9B,KAAK,UAAU;IACf,KAAK,UAAU;IACf,IAAI,SAAS;IACb,IAAI,SAAS;IACb,KAAK,UAAU;IACf,KAAK,UAAU;CAChB;AAGD;;GAEG;AACH,MAAM,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"Updates.types.d.ts","sourceRoot":"","sources":["../src/Updates.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.types.js.map b/node_modules/expo-updates/build/Updates.types.js.map
index a5405c5..202e6a4 100644
--- a/node_modules/expo-updates/build/Updates.types.js.map
+++ b/node_modules/expo-updates/build/Updates.types.js.map
@@ -1 +1 @@
-{"version":3,"file":"Updates.types.js","sourceRoot":"","sources":["../src/Updates.types.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAN,IAAY,eAeX;AAfD,WAAY,eAAe;IACzB;;;;OAIG;IACH,uDAAoC,CAAA;IACpC;;OAEG;IACH,4DAAyC,CAAA;IACzC;;OAEG;IACH,kCAAe,CAAA;AACjB,CAAC,EAfW,eAAe,KAAf,eAAe,QAe1B;AAyID;;GAEG;AACH,MAAM,CAAN,IAAY,mBAWX;AAXD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,kEAA2C,CAAA;IAC3C,+EAAwD,CAAA;IACxD,4EAAqD,CAAA;IACrD,iFAA0D,CAAA;IAC1D,2EAAoD,CAAA;IACpD,mEAA4C,CAAA;IAC5C,mEAA4C,CAAA;IAC5C,0DAAmC,CAAA;IACnC,0CAAmB,CAAA;AACrB,CAAC,EAXW,mBAAmB,KAAnB,mBAAmB,QAW9B;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,uCAAe,CAAA;IACf,qCAAa,CAAA;IACb,qCAAa,CAAA;IACb,uCAAe,CAAA;IACf,uCAAe,CAAA;AACjB,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B","sourcesContent":["import Constants from 'expo-constants';\n\n/**\n * The types of update-related events.\n */\nexport enum UpdateEventType {\n  /**\n   * A new update has finished downloading to local storage. If you would like to start using this\n   * update at any point before the user closes and restarts the app on their own, you can call\n   * [`Updates.reloadAsync()`](#reloadasync) to launch this new update.\n   */\n  UPDATE_AVAILABLE = 'updateAvailable',\n  /**\n   * No updates are available, and the most up-to-date update is already running.\n   */\n  NO_UPDATE_AVAILABLE = 'noUpdateAvailable',\n  /**\n   * An error occurred trying to fetch the latest update.\n   */\n  ERROR = 'error',\n}\n\n// @docsMissing\n// TODO(eric): move source of truth for manifest type to this module\n/**\n * @hidden\n */\nexport type ClassicManifest = typeof Constants.manifest;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type Manifest = ClassicManifest | typeof Constants.manifest2;\n// modern manifest type is intentionally not exported, since the plan is to call it just \"Manifest\"\n// in the future\n\n/**\n * The successful result of checking for a new update.\n */\ntype UpdateCheckResultSuccess = {\n  /**\n   * Signifies that an update is available.\n   */\n  isAvailable: true;\n  /**\n   * The manifest of the available update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of checking for a new update.\n */\ntype UpdateCheckResultFailure = {\n  /**\n   * Signifies that the app is already running the latest available update.\n   */\n  isAvailable: false;\n  /**\n   * No manifest, since the app is already running the latest available version.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of checking for a new update.\n */\nexport type UpdateCheckResult = UpdateCheckResultSuccess | UpdateCheckResultFailure;\n\n/**\n * The successful result of fetching a new update.\n */\ntype UpdateFetchResultSuccess = {\n  /**\n   * Signifies that the fetched bundle is new (that is, a different version than what's currently\n   * running).\n   */\n  isNew: true;\n  /**\n   * The manifest of the newly downloaded update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of fetching a new update.\n */\ntype UpdateFetchResultFailure = {\n  /**\n   * Signifies that the fetched bundle is the same as version which is currently running.\n   */\n  isNew: false;\n  /**\n   * No manifest, since there is no update.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of fetching a new update.\n */\nexport type UpdateFetchResult = UpdateFetchResultSuccess | UpdateFetchResultFailure;\n\n/**\n * An object that is passed into each event listener when an auto-update check occurs.\n */\nexport type UpdateEvent = {\n  /**\n   * Type of the event.\n   */\n  type: UpdateEventType;\n  /**\n   * If `type` is `Updates.UpdateEventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded\n   * update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n  /**\n   * If `type` is `Updates.UpdateEventType.ERROR`, the error message, and `undefined` otherwise.\n   */\n  message?: string;\n};\n\n/**\n * An object representing a single log entry from expo-updates logging on the client.\n */\nexport type UpdatesLogEntry = {\n  /**\n   * The time the log was written, in milliseconds since Jan 1 1970 UTC.\n   */\n  timestamp: number;\n  /**\n   * The log entry message.\n   */\n  message: string;\n  /**\n   * One of the defined code values for expo-updates log entries.\n   */\n  code: UpdatesLogEntryCode;\n  /**\n   * One of the defined log level or severity values.\n   */\n  level: UpdatesLogEntryLevel;\n  /**\n   * If present, the unique ID of an update associated with this log entry.\n   */\n  updateId?: string;\n  /**\n   * If present, the unique ID or hash of an asset associated with this log entry.\n   */\n  assetId?: string;\n  /**\n   * If present, an iOS or Android native stack trace associated with this log entry.\n   */\n  stacktrace?: string[];\n};\n\n/**\n * The possible code values for expo-updates log entries\n */\nexport enum UpdatesLogEntryCode {\n  NONE = 'None',\n  NO_UPDATES_AVAILABLE = 'NoUpdatesAvailable',\n  UPDATE_ASSETS_NOT_AVAILABLE = 'UpdateAssetsNotAvailable',\n  UPDATE_SERVER_UNREACHABLE = 'UpdateServerUnreachable',\n  UPDATE_HAS_INVALID_SIGNATURE = 'UpdateHasInvalidSignature',\n  UPDATE_CODE_SIGNING_ERROR = 'UpdateCodeSigningError',\n  UPDATE_FAILED_TO_LOAD = 'UpdateFailedToLoad',\n  ASSETS_FAILED_TO_LOAD = 'AssetsFailedToLoad',\n  JS_RUNTIME_ERROR = 'JSRuntimeError',\n  UNKNOWN = 'Unknown',\n}\n\n/**\n * The possible log levels for expo-updates log entries\n */\nexport enum UpdatesLogEntryLevel {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type LocalAssets = Record<string, string>;\n"]}
\ No newline at end of file
+{"version":3,"file":"Updates.types.js","sourceRoot":"","sources":["../src/Updates.types.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAN,IAAY,eAeX;AAfD,WAAY,eAAe;IACzB;;;;OAIG;IACH,uDAAoC,CAAA;IACpC;;OAEG;IACH,4DAAyC,CAAA;IACzC;;OAEG;IACH,kCAAe,CAAA;AACjB,CAAC,EAfW,eAAe,KAAf,eAAe,QAe1B;AAyID;;GAEG;AACH,MAAM,CAAN,IAAY,mBAWX;AAXD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,kEAA2C,CAAA;IAC3C,+EAAwD,CAAA;IACxD,4EAAqD,CAAA;IACrD,iFAA0D,CAAA;IAC1D,2EAAoD,CAAA;IACpD,mEAA4C,CAAA;IAC5C,mEAA4C,CAAA;IAC5C,0DAAmC,CAAA;IACnC,0CAAmB,CAAA;AACrB,CAAC,EAXW,mBAAmB,KAAnB,mBAAmB,QAW9B;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,uCAAe,CAAA;IACf,qCAAa,CAAA;IACb,qCAAa,CAAA;IACb,uCAAe,CAAA;IACf,uCAAe,CAAA;AACjB,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B","sourcesContent":["import Constants from 'expo-constants';\n\n/**\n * The types of update-related events.\n */\nexport enum UpdateEventType {\n  /**\n   * A new update has finished downloading to local storage. If you would like to start using this\n   * update at any point before the user closes and restarts the app on their own, you can call\n   * [`Updates.reloadAsync()`](#reloadasync) to launch this new update.\n   */\n  UPDATE_AVAILABLE = 'updateAvailable',\n  /**\n   * No updates are available, and the most up-to-date update is already running.\n   */\n  NO_UPDATE_AVAILABLE = 'noUpdateAvailable',\n  /**\n   * An error occurred trying to fetch the latest update.\n   */\n  ERROR = 'error',\n}\n\n// @docsMissing\n// TODO(eric): move source of truth for manifest type to this module\n/**\n * @hidden\n */\nexport type ClassicManifest = typeof Constants.manifest;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type Manifest = ClassicManifest | typeof Constants.manifest2;\n// modern manifest type is intentionally not exported, since the plan is to call it just \"Manifest\"\n// in the future\n\n/**\n * The successful result of checking for a new update.\n */\ntype UpdateCheckResultSuccess = {\n  /**\n   * Signifies that an update is available.\n   */\n  isAvailable: true;\n  /**\n   * The manifest of the available update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of checking for a new update.\n */\ntype UpdateCheckResultFailure = {\n  /**\n   * Signifies that the app is already running the latest available update.\n   */\n  isAvailable: false;\n  /**\n   * No manifest, since the app is already running the latest available version.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of checking for a new update.\n */\nexport type UpdateCheckResult = UpdateCheckResultSuccess | UpdateCheckResultFailure;\n\n/**\n * The successful result of fetching a new update.\n */\ntype UpdateFetchResultSuccess = {\n  /**\n   * Signifies that the fetched bundle is new (that is, a different version than what's currently\n   * running).\n   */\n  isNew: true;\n  /**\n   * The manifest of the newly downloaded update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * The failed result of fetching a new update.\n */\ntype UpdateFetchResultFailure = {\n  /**\n   * Signifies that the fetched bundle is the same as version which is currently running.\n   */\n  isNew: false;\n  /**\n   * No manifest, since there is no update.\n   */\n  manifest: undefined;\n};\n\n/**\n * The result of fetching a new update.\n */\nexport type UpdateFetchResult = UpdateFetchResultSuccess | UpdateFetchResultFailure;\n\n/**\n * An object that is passed into each event listener when an auto-update check occurs.\n */\nexport type UpdateEvent = {\n  /**\n   * Type of the event.\n   */\n  type: UpdateEventType;\n  /**\n   * If `type` is `Updates.UpdateEventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded\n   * update, and `undefined` otherwise.\n   */\n  manifest?: Manifest;\n  /**\n   * If `type` is `Updates.UpdateEventType.ERROR`, the error message, and `undefined` otherwise.\n   */\n  message?: string;\n};\n\n/**\n * An object representing a single log entry from expo-updates logging on the client.\n */\nexport type UpdatesLogEntry = {\n  /**\n   * The time the log was written, in milliseconds since Jan 1 1970 UTC.\n   */\n  timestamp: number;\n  /**\n   * The log entry message.\n   */\n  message: string;\n  /**\n   * One of the defined code values for expo-updates log entries.\n   */\n  code: UpdatesLogEntryCode;\n  /**\n   * One of the defined log level or severity values.\n   */\n  level: UpdatesLogEntryLevel;\n  /**\n   * If present, the unique ID of an update associated with this log entry.\n   */\n  updateId?: string;\n  /**\n   * If present, the unique ID or hash of an asset associated with this log entry.\n   */\n  assetId?: string;\n  /**\n   * If present, an iOS or Android native stack trace associated with this log entry.\n   */\n  stacktrace?: string[];\n};\n\n/**\n * The possible code values for expo-updates log entries\n */\nexport enum UpdatesLogEntryCode {\n  NONE = 'None',\n  NO_UPDATES_AVAILABLE = 'NoUpdatesAvailable',\n  UPDATE_ASSETS_NOT_AVAILABLE = 'UpdateAssetsNotAvailable',\n  UPDATE_SERVER_UNREACHABLE = 'UpdateServerUnreachable',\n  UPDATE_HAS_INVALID_SIGNATURE = 'UpdateHasInvalidSignature',\n  UPDATE_CODE_SIGNING_ERROR = 'UpdateCodeSigningError',\n  UPDATE_FAILED_TO_LOAD = 'UpdateFailedToLoad',\n  ASSETS_FAILED_TO_LOAD = 'AssetsFailedToLoad',\n  JS_RUNTIME_ERROR = 'JSRuntimeError',\n  UNKNOWN = 'Unknown',\n}\n\n/**\n * The possible log levels for expo-updates log entries\n */\nexport enum UpdatesLogEntryLevel {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// @docsMissing\n/**\n * @hidden\n */\nexport type LocalAssets = Record<string, string>;\n\n/**\n * Updates info structure provided by UpdatesProvider.\n */\nexport type UpdatesInfo = {\n  /**\n   * The manifest for the currently running update.\n   */\n  currentlyRunning: Partial<Manifest>;\n  /**\n   * If a new available update has been found, either by using checkForUpdate(), or by the UpdateEvent listener in useUpdates(),\n   * this will contain the manifest for that update.\n   */\n  updateAvailable?: Partial<Manifest>;\n  /**\n   * True if the application is running the embedded bundle and not a downloaded update.\n   */\n  embedded: boolean;\n  /**\n   * If an error is returned by the UpdateEvent listener, the error description will appear here.\n   */\n  error?: string;\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesProvider.d.ts b/node_modules/expo-updates/build/UpdatesProvider.d.ts
new file mode 100644
index 0000000..a302d4a
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesProvider.d.ts
@@ -0,0 +1,33 @@
+import type { UpdatesInfo } from './Updates.types';
+/**
+ * Calls [`checkForUpdateAsync`](#checkforupdateasync) and uses the passed in setter
+ * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from
+ * the [`useUpdates`](#useupdates) hook.
+ */
+export declare let checkForUpdate: () => void;
+/**
+ * Downloads and runs an update, if one is available. Provided to application code
+ * from the [`useUpdates`](#useupdates) hook.
+ */
+export declare const runUpdate: () => Promise<void>;
+/**
+ * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener
+ * that will set the context automatically, if automatic updates are enabled and a new
+ * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.
+ * @param props Context will be provided to `props.children`
+ * @returns the provider.
+ */
+declare const UpdatesProvider: (props: {
+    children: any;
+}) => JSX.Element;
+/**
+ * Hook that obtains the Updates info structure and functions. Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).
+ * @returns the [`UpdatesInfo`](#updatesinfo) structure, the [`checkForUpdate`](#checkforupdate) function, and the [`runUpdate`](#runupdate) function.
+ */
+declare const useUpdates: () => {
+    updatesInfo: UpdatesInfo;
+    checkForUpdate: typeof checkForUpdate;
+    runUpdate: typeof runUpdate;
+};
+export { UpdatesProvider, useUpdates };
+//# sourceMappingURL=UpdatesProvider.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesProvider.d.ts.map b/node_modules/expo-updates/build/UpdatesProvider.d.ts.map
new file mode 100644
index 0000000..1cd6ca6
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesProvider.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"UpdatesProvider.d.ts","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAe,WAAW,EAAE,MAAM,iBAAiB,CAAC;AA4FhE;;;;GAIG;AACH,eAAO,IAAI,cAAc,YAExB,CAAC;AAEF;;;GAGG;AACH,eAAO,MAAM,SAAS,EAAE,MAAM,OAAO,CAAC,IAAI,CAIzC,CAAC;AAEF;;;;;;GAMG;AACH,QAAA,MAAM,eAAe,UAAW;IAAE,QAAQ,EAAE,GAAG,CAAA;CAAE,gBAgBhD,CAAC;AAEF;;;GAGG;AACH,QAAA,MAAM,UAAU;iBACD,WAAW;oBACR,qBAAqB;eAC1B,gBAAgB;CAW5B,CAAC;AAEF,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesProvider.js b/node_modules/expo-updates/build/UpdatesProvider.js
new file mode 100644
index 0000000..694fc91
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesProvider.js
@@ -0,0 +1,129 @@
+import React, { createContext, useContext, useState } from 'react';
+import * as Updates from './Updates';
+import { useUpdateEvents } from './UpdatesHooks';
+/////// Constants ////////
+// The currently running update, constructed from the manifest constant
+const currentlyRunning = Updates.manifest;
+// True if the app is running from the embedded bundle
+const embedded = Updates.isEmbeddedLaunch;
+/////// Internal functions ////////
+// Promise wrapper for setTimeout()
+const delay = (timeout) => {
+    return new Promise((resolve) => {
+        setTimeout(resolve, timeout);
+    });
+};
+// Constructs the UpdatesInfo from an event
+const updatesFromEvent = (event) => {
+    if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {
+        return {
+            currentlyRunning,
+            embedded,
+        };
+    }
+    else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {
+        return {
+            currentlyRunning,
+            updateAvailable: event.manifest,
+            embedded,
+        };
+    }
+    else {
+        // event type === ERROR
+        return {
+            currentlyRunning,
+            error: event.message || '',
+            embedded,
+        };
+    }
+};
+// Implementation of checkForUpdate
+const checkAndRefreshUpdatesStructure = async (setUpdates) => {
+    let result;
+    try {
+        const checkResult = await Updates.checkForUpdateAsync();
+        if (checkResult.isAvailable) {
+            result = {
+                currentlyRunning,
+                updateAvailable: checkResult.manifest,
+                embedded,
+            };
+        }
+        else {
+            result = {
+                currentlyRunning,
+                embedded,
+            };
+        }
+    }
+    catch (error) {
+        result = {
+            currentlyRunning,
+            error: error?.message || 'Error occurred',
+            embedded,
+        };
+    }
+    setUpdates(result);
+};
+// The context provided to the app
+const UpdatesContext = createContext({
+    updatesInfo: {
+        currentlyRunning,
+        embedded,
+    },
+    setUpdatesInfo: (_) => { },
+});
+///////////// Exported functions /////////////
+/**
+ * Calls [`checkForUpdateAsync`](#checkforupdateasync) and uses the passed in setter
+ * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from
+ * the [`useUpdates`](#useupdates) hook.
+ */
+export let checkForUpdate = () => {
+    // This stub is replaced with the real implementation in the hook
+};
+/**
+ * Downloads and runs an update, if one is available. Provided to application code
+ * from the [`useUpdates`](#useupdates) hook.
+ */
+export const runUpdate = async () => {
+    await Updates.fetchUpdateAsync();
+    await delay(2000);
+    await Updates.reloadAsync();
+};
+/**
+ * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener
+ * that will set the context automatically, if automatic updates are enabled and a new
+ * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.
+ * @param props Context will be provided to `props.children`
+ * @returns the provider.
+ */
+const UpdatesProvider = (props) => {
+    const [updatesInfo, setUpdatesInfo] = useState({
+        currentlyRunning,
+        embedded,
+    });
+    // Set up listener for events from automatic update requests
+    // that happen on startup, and use events to refresh the updates info
+    // context
+    useUpdateEvents((event) => {
+        setUpdatesInfo(updatesFromEvent(event));
+    });
+    return (React.createElement(UpdatesContext.Provider, { value: { updatesInfo, setUpdatesInfo } }, props.children));
+};
+/**
+ * Hook that obtains the Updates info structure and functions. Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).
+ * @returns the [`UpdatesInfo`](#updatesinfo) structure, the [`checkForUpdate`](#checkforupdate) function, and the [`runUpdate`](#runupdate) function.
+ */
+const useUpdates = () => {
+    // Get updates info value and setter from provider
+    const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);
+    // Create the implementation of checkForUpdate()
+    checkForUpdate = () => {
+        checkAndRefreshUpdatesStructure(setUpdatesInfo);
+    };
+    // Return the updates info and the user facing functions
+    return { updatesInfo, checkForUpdate, runUpdate };
+};
+export { UpdatesProvider, useUpdates };
+//# sourceMappingURL=UpdatesProvider.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesProvider.js.map b/node_modules/expo-updates/build/UpdatesProvider.js.map
new file mode 100644
index 0000000..9534917
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesProvider.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"UpdatesProvider.js","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport type { UpdateEvent, UpdatesInfo } from './Updates.types';\nimport { useUpdateEvents } from './UpdatesHooks';\n\n/////// Types ////////\n\n/**\n * Context that includes getter and setter for updates info\n */\ntype UpdatesContextType = {\n  updatesInfo: UpdatesInfo;\n  setUpdatesInfo: (updates: UpdatesInfo) => void;\n};\n\n/////// Constants ////////\n\n// The currently running update, constructed from the manifest constant\nconst currentlyRunning = Updates.manifest;\n// True if the app is running from the embedded bundle\nconst embedded = Updates.isEmbeddedLaunch;\n\n/////// Internal functions ////////\n\n// Promise wrapper for setTimeout()\nconst delay = (timeout: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n};\n\n// Constructs the UpdatesInfo from an event\nconst updatesFromEvent = (event: UpdateEvent): UpdatesInfo => {\n  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      embedded,\n    };\n  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n    return {\n      currentlyRunning,\n      updateAvailable: event.manifest,\n      embedded,\n    };\n  } else {\n    // event type === ERROR\n    return {\n      currentlyRunning,\n      error: event.message || '',\n      embedded,\n    };\n  }\n};\n\n// Implementation of checkForUpdate\nconst checkAndRefreshUpdatesStructure: (\n  setUpdates: (_: UpdatesInfo) => void\n) => Promise<void> = async (setUpdates) => {\n  let result: UpdatesInfo;\n  try {\n    const checkResult = await Updates.checkForUpdateAsync();\n    if (checkResult.isAvailable) {\n      result = {\n        currentlyRunning,\n        updateAvailable: checkResult.manifest,\n        embedded,\n      };\n    } else {\n      result = {\n        currentlyRunning,\n        embedded,\n      };\n    }\n  } catch (error: any) {\n    result = {\n      currentlyRunning,\n      error: error?.message || 'Error occurred',\n      embedded,\n    };\n  }\n  setUpdates(result);\n};\n\n// The context provided to the app\nconst UpdatesContext: React.Context<UpdatesContextType> = createContext({\n  updatesInfo: {\n    currentlyRunning,\n    embedded,\n  },\n  setUpdatesInfo: (_) => {},\n});\n\n///////////// Exported functions /////////////\n\n/**\n * Calls [`checkForUpdateAsync`](#checkforupdateasync) and uses the passed in setter\n * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from\n * the [`useUpdates`](#useupdates) hook.\n */\nexport let checkForUpdate = () => {\n  // This stub is replaced with the real implementation in the hook\n};\n\n/**\n * Downloads and runs an update, if one is available. Provided to application code\n * from the [`useUpdates`](#useupdates) hook.\n */\nexport const runUpdate: () => Promise<void> = async () => {\n  await Updates.fetchUpdateAsync();\n  await delay(2000);\n  await Updates.reloadAsync();\n};\n\n/**\n * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener\n * that will set the context automatically, if automatic updates are enabled and a new\n * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.\n * @param props Context will be provided to `props.children`\n * @returns the provider.\n */\nconst UpdatesProvider = (props: { children: any }) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n    embedded,\n  });\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo(updatesFromEvent(event));\n  });\n  return (\n    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>\n      {props.children}\n    </UpdatesContext.Provider>\n  );\n};\n\n/**\n * Hook that obtains the Updates info structure and functions. Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).\n * @returns the [`UpdatesInfo`](#updatesinfo) structure, the [`checkForUpdate`](#checkforupdate) function, and the [`runUpdate`](#runupdate) function.\n */\nconst useUpdates = (): {\n  updatesInfo: UpdatesInfo;\n  checkForUpdate: typeof checkForUpdate;\n  runUpdate: typeof runUpdate;\n} => {\n  // Get updates info value and setter from provider\n  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);\n\n  // Create the implementation of checkForUpdate()\n  checkForUpdate = () => {\n    checkAndRefreshUpdatesStructure(setUpdatesInfo);\n  };\n  // Return the updates info and the user facing functions\n  return { updatesInfo, checkForUpdate, runUpdate };\n};\n\nexport { UpdatesProvider, useUpdates };\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.d.ts b/node_modules/expo-updates/build/index.d.ts
index b67bbd5..70af6d1 100644
--- a/node_modules/expo-updates/build/index.d.ts
+++ b/node_modules/expo-updates/build/index.d.ts
@@ -1,3 +1,4 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export { UpdatesProvider, useUpdates, checkForUpdate, runUpdate } from './UpdatesProvider';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.d.ts.map b/node_modules/expo-updates/build/index.d.ts.map
index 314e2ba..2e00ac7 100644
--- a/node_modules/expo-updates/build/index.d.ts.map
+++ b/node_modules/expo-updates/build/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.js b/node_modules/expo-updates/build/index.js
index 10c0854..037134e 100644
--- a/node_modules/expo-updates/build/index.js
+++ b/node_modules/expo-updates/build/index.js
@@ -1,3 +1,4 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export { UpdatesProvider, useUpdates, checkForUpdate, runUpdate } from './UpdatesProvider';
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.js.map b/node_modules/expo-updates/build/index.js.map
index a252c10..17379ac 100644
--- a/node_modules/expo-updates/build/index.js.map
+++ b/node_modules/expo-updates/build/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC","sourcesContent":["export * from './Updates';\nexport * from './UpdatesHooks';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC","sourcesContent":["export * from './Updates';\nexport * from './UpdatesHooks';\nexport { UpdatesProvider, useUpdates, checkForUpdate, runUpdate } from './UpdatesProvider';\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/src/Updates.types.ts b/node_modules/expo-updates/src/Updates.types.ts
index ed5028a..eec7722 100644
--- a/node_modules/expo-updates/src/Updates.types.ts
+++ b/node_modules/expo-updates/src/Updates.types.ts
@@ -188,3 +188,26 @@ export enum UpdatesLogEntryLevel {
  * @hidden
  */
 export type LocalAssets = Record<string, string>;
+
+/**
+ * Updates info structure provided by UpdatesProvider.
+ */
+export type UpdatesInfo = {
+  /**
+   * The manifest for the currently running update.
+   */
+  currentlyRunning: Partial<Manifest>;
+  /**
+   * If a new available update has been found, either by using checkForUpdate(), or by the UpdateEvent listener in useUpdates(),
+   * this will contain the manifest for that update.
+   */
+  updateAvailable?: Partial<Manifest>;
+  /**
+   * True if the application is running the embedded bundle and not a downloaded update.
+   */
+  embedded: boolean;
+  /**
+   * If an error is returned by the UpdateEvent listener, the error description will appear here.
+   */
+  error?: string;
+};
diff --git a/node_modules/expo-updates/src/UpdatesProvider.tsx b/node_modules/expo-updates/src/UpdatesProvider.tsx
new file mode 100644
index 0000000..24fd312
--- /dev/null
+++ b/node_modules/expo-updates/src/UpdatesProvider.tsx
@@ -0,0 +1,160 @@
+import React, { createContext, useContext, useState } from 'react';
+
+import * as Updates from './Updates';
+import type { UpdateEvent, UpdatesInfo } from './Updates.types';
+import { useUpdateEvents } from './UpdatesHooks';
+
+/////// Types ////////
+
+/**
+ * Context that includes getter and setter for updates info
+ */
+type UpdatesContextType = {
+  updatesInfo: UpdatesInfo;
+  setUpdatesInfo: (updates: UpdatesInfo) => void;
+};
+
+/////// Constants ////////
+
+// The currently running update, constructed from the manifest constant
+const currentlyRunning = Updates.manifest;
+// True if the app is running from the embedded bundle
+const embedded = Updates.isEmbeddedLaunch;
+
+/////// Internal functions ////////
+
+// Promise wrapper for setTimeout()
+const delay = (timeout: number) => {
+  return new Promise((resolve) => {
+    setTimeout(resolve, timeout);
+  });
+};
+
+// Constructs the UpdatesInfo from an event
+const updatesFromEvent = (event: UpdateEvent): UpdatesInfo => {
+  if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {
+    return {
+      currentlyRunning,
+      embedded,
+    };
+  } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {
+    return {
+      currentlyRunning,
+      updateAvailable: event.manifest,
+      embedded,
+    };
+  } else {
+    // event type === ERROR
+    return {
+      currentlyRunning,
+      error: event.message || '',
+      embedded,
+    };
+  }
+};
+
+// Implementation of checkForUpdate
+const checkAndRefreshUpdatesStructure: (
+  setUpdates: (_: UpdatesInfo) => void
+) => Promise<void> = async (setUpdates) => {
+  let result: UpdatesInfo;
+  try {
+    const checkResult = await Updates.checkForUpdateAsync();
+    if (checkResult.isAvailable) {
+      result = {
+        currentlyRunning,
+        updateAvailable: checkResult.manifest,
+        embedded,
+      };
+    } else {
+      result = {
+        currentlyRunning,
+        embedded,
+      };
+    }
+  } catch (error: any) {
+    result = {
+      currentlyRunning,
+      error: error?.message || 'Error occurred',
+      embedded,
+    };
+  }
+  setUpdates(result);
+};
+
+// The context provided to the app
+const UpdatesContext: React.Context<UpdatesContextType> = createContext({
+  updatesInfo: {
+    currentlyRunning,
+    embedded,
+  },
+  setUpdatesInfo: (_) => {},
+});
+
+///////////// Exported functions /////////////
+
+/**
+ * Calls [`checkForUpdateAsync`](#checkforupdateasync) and uses the passed in setter
+ * to refresh the [`UpdatesInfo`](#updatesinfo). Provided to application code from
+ * the [`useUpdates`](#useupdates) hook.
+ */
+export let checkForUpdate = () => {
+  // This stub is replaced with the real implementation in the hook
+};
+
+/**
+ * Downloads and runs an update, if one is available. Provided to application code
+ * from the [`useUpdates`](#useupdates) hook.
+ */
+export const runUpdate: () => Promise<void> = async () => {
+  await Updates.fetchUpdateAsync();
+  await delay(2000);
+  await Updates.reloadAsync();
+};
+
+/**
+ * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener
+ * that will set the context automatically, if automatic updates are enabled and a new
+ * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.
+ * @param props Context will be provided to `props.children`
+ * @returns the provider.
+ */
+const UpdatesProvider = (props: { children: any }) => {
+  const [updatesInfo, setUpdatesInfo] = useState({
+    currentlyRunning,
+    embedded,
+  });
+  // Set up listener for events from automatic update requests
+  // that happen on startup, and use events to refresh the updates info
+  // context
+  useUpdateEvents((event) => {
+    setUpdatesInfo(updatesFromEvent(event));
+  });
+  return (
+    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>
+      {props.children}
+    </UpdatesContext.Provider>
+  );
+};
+
+/**
+ * Hook that obtains the Updates info structure and functions. Requires that application code be inside an [`UpdatesProvider`](#updatesprovider).
+ * @returns the [`UpdatesInfo`](#updatesinfo) structure, the [`checkForUpdate`](#checkforupdate) function, and the [`runUpdate`](#runupdate) function.
+ */
+const useUpdates = (): {
+  updatesInfo: UpdatesInfo;
+  checkForUpdate: typeof checkForUpdate;
+  runUpdate: typeof runUpdate;
+} => {
+  // Get updates info value and setter from provider
+  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);
+
+  // Create the implementation of checkForUpdate()
+  checkForUpdate = () => {
+    checkAndRefreshUpdatesStructure(setUpdatesInfo);
+  };
+  // Return the updates info and the user facing functions
+  return { updatesInfo, checkForUpdate, runUpdate };
+};
+
+export { UpdatesProvider, useUpdates };
diff --git a/node_modules/expo-updates/src/index.ts b/node_modules/expo-updates/src/index.ts
index ad39cc8..e367f50 100644
--- a/node_modules/expo-updates/src/index.ts
+++ b/node_modules/expo-updates/src/index.ts
@@ -1,2 +1,3 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export { UpdatesProvider, useUpdates, checkForUpdate, runUpdate } from './UpdatesProvider';
