diff --git a/node_modules/expo-updates/CHANGELOG.md.orig b/node_modules/expo-updates/CHANGELOG.md.orig
new file mode 100644
index 0000000..4d71503
--- /dev/null
+++ b/node_modules/expo-updates/CHANGELOG.md.orig
@@ -0,0 +1,739 @@
+# Changelog
+
+## Unpublished
+
+### üõ† Breaking changes
+
+### üéâ New features
+
+### üêõ Bug fixes
+
+### üí° Others
+
+## 0.16.3 ‚Äî 2023-02-22
+
+### üéâ New features
+
+- New `useUpdateEvents` hook. ([#21258](https://github.com/expo/expo/pull/21258) by [@douglowder](https://github.com/douglowder))
+
+### üêõ Bug fixes
+
+- Make Updates API work with native debug. ([#21253](https://github.com/expo/expo/pull/21253) by [@douglowder](https://github.com/douglowder))
+
+### üí° Others
+
+- Break up E2E tests for reliability. ([#21223](https://github.com/expo/expo/pull/21223) by [@douglowder](https://github.com/douglowder))
+- Convert E2E tests to TypeScript. ([#21278](https://github.com/expo/expo/pull/21278) by [@douglowder](https://github.com/douglowder))
+
+## 0.16.2 ‚Äî 2023-02-21
+
+_This version does not introduce any user-facing changes._
+
+## 0.16.1 ‚Äî 2023-02-09
+
+### üí° Others
+
+- Convert E2E tests to Hermes. ([#21065](https://github.com/expo/expo/pull/21065) by [@douglowder](https://github.com/douglowder))
+
+## 0.16.0 ‚Äî 2023-02-03
+
+### üêõ Bug fixes
+
+- [Android] Fix runtime version parsing. ([#19821](https://github.com/expo/expo/pull/19821) by [@douglowder](https://github.com/douglowder))
+- Added support for React Native 0.71.x. ([#20799](https://github.com/expo/expo/pull/20799) [#20832](https://github.com/expo/expo/pull/20832) by [@kudo](https://github.com/kudo))
+
+### üí° Others
+
+- Bump `@expo/metro-config`. ([#20720](https://github.com/expo/expo/pull/20720) by [@EvanBacon](https://github.com/EvanBacon))
+- Improvements to setup for Updates E2E tests. ([#20120](https://github.com/expo/expo/pull/20120) by [@douglowder](https://github.com/douglowder))
+- Convert updates E2E workflow to use EAS. ([#20399](https://github.com/expo/expo/pull/20399) by [@douglowder](https://github.com/douglowder))
+- Avoid dependency on `uuid`. ([#20475](https://github.com/expo/expo/pull/20475) by [@LinusU](https://github.com/LinusU))
+- On Android bump `compileSdkVersion` and `targetSdkVersion` to `33`. ([#20721](https://github.com/expo/expo/pull/20721) by [@lukmccall](https://github.com/lukmccall))
+
+## 0.15.5 - 2022-11-14
+
+### üéâ New features
+
+- New API Updates.isEmbeddedLaunch. ([#20014](https://github.com/expo/expo/pull/20014) by [@douglowder](https://github.com/douglowder))
+
+## 0.15.4 ‚Äî 2022-11-03
+
+### üêõ Bug fixes
+
+- Fixed another _app.manifest_ occasionally missing from build outputs on Android. ([#19809](https://github.com/expo/expo/pull/19809) by [@kudo](https://github.com/kudo))
+
+## 0.15.3 ‚Äî 2022-10-30
+
+_This version does not introduce any user-facing changes._
+
+## 0.15.2 ‚Äî 2022-10-28
+
+_This version does not introduce any user-facing changes._
+
+## 0.15.1 ‚Äî 2022-10-28
+
+### üêõ Bug fixes
+
+- Fixed the _app.manifest_ occasionally missing from build outputs on Android. ([#19731](https://github.com/expo/expo/pull/19731) by [@kudo](https://github.com/kudo), [@kudo](https://github.com/kudo))
+
+## 0.15.0 ‚Äî 2022-10-25
+
+### üõ† Breaking changes
+
+- [plugin] Upgrade minimum runtime requirement to Node 14 (LTS). ([#18204](https://github.com/expo/expo/pull/18204) by [@EvanBacon](https://github.com/EvanBacon))
+- Bumped iOS deployment target to 13.0 and deprecated support for iOS 12. ([#18873](https://github.com/expo/expo/pull/18873) by [@tsapeta](https://github.com/tsapeta))
+
+### üéâ New features
+
+- [iOS] New logger and log reader for unifying logging support in expo-updates. ([#18284](https://github.com/expo/expo/pull/18284) by [@douglowder](https://github.com/douglowder))
+- [Android] New logger and log reader for unifying logging support in expo-updates. ([#18318](https://github.com/expo/expo/pull/18318) by [@douglowder](https://github.com/douglowder))
+- Add JS methods to read and clear client logs. ([#18390](https://github.com/expo/expo/pull/18390) by [@douglowder](https://github.com/douglowder))
+- Add Logger support for writing logs to a file; add Logger and associated classes to Android. ([#18513](https://github.com/expo/expo/pull/18513) by [@douglowder](https://github.com/douglowder))
+- Make extra header processing code consistent between manifests and assets. ([#18564](https://github.com/expo/expo/pull/18564) by [@wschurman](https://github.com/wschurman))
+- Type `UpdateCheckResult` and `UpdateFetchResult` to reflect when `manifest` is defined or not. ([#18577](https://github.com/expo/expo/pull/18577) by [@SimenB](https://github.com/SimenB))
+
+### üêõ Bug fixes
+
+- Fix small race condition in recovery code on Android where in very rare scenarios, a bundle could be downloaded twice. ([#18377](https://github.com/expo/expo/pull/18377) by [@esamelson](https://github.com/esamelson))
+- Fixed _with-node.sh_ doesn't keep quotes when passing arguments to Node.js and caused build errors when there are spaces in target name. ([#18741](https://github.com/expo/expo/pull/18741) by [@kudo](https://github.com/kudo))
+
+### üí° Others
+
+- [plugin] Migrate import from @expo/config-plugins to expo/config-plugins and @expo/config-types to expo/config. ([#18855](https://github.com/expo/expo/pull/18855) by [@brentvatne](https://github.com/brentvatne))
+- Update doc block link for manifests. ([#18981](https://github.com/expo/expo/pull/18981) by [@EvanBacon](https://github.com/EvanBacon))
+- Drop `@expo/config-plugins` dependency in favor of peer dependency on `expo`. ([#18595](https://github.com/expo/expo/pull/18595) by [@EvanBacon](https://github.com/EvanBacon))
+- Log various errors with the new Updates logger; add E2E tests for the logger. ([#18810](https://github.com/expo/expo/pull/18810) by [@douglowder](https://github.com/douglowder))
+- [iOS] Flag to enable native debugging of updates. ([#19292](https://github.com/expo/expo/pull/19292) by [@douglowder](https://github.com/douglowder))
+- [Android] Flag to enable native debugging of updates. ([#19441](https://github.com/expo/expo/pull/19441) by [@douglowder](https://github.com/douglowder))
+
+### ‚ö†Ô∏è Notices
+
+- Added support for React Native 0.70.x. ([#19261](https://github.com/expo/expo/pull/19261) by [@kudo](https://github.com/kudo))
+
+## 0.14.3 ‚Äî 2022-07-25
+
+### üêõ Bug fixes
+
+- Deprecated the unreliable `source-login-scripts.sh` and sourcing the Node.js binary path from `.xcode.env` and `.xcode.env.local`. ([#18330](https://github.com/expo/expo/pull/18330) by [@kudo](https://github.com/kudo))
+
+## 0.14.2 ‚Äî 2022-07-16
+
+_This version does not introduce any user-facing changes._
+
+## 0.14.1 ‚Äî 2022-07-11
+
+_This version does not introduce any user-facing changes._
+
+## 0.14.0 ‚Äî 2022-07-07
+
+### üêõ Bug fixes
+
+- Improved support of nvm sourcing in iOS shell scripts. ([#17109](https://github.com/expo/expo/pull/17109) by [@liamronancb](https://github.com/liamronancb))
+- Android: Allow null asset hash in new manifests. ([#17466](https://github.com/expo/expo/pull/17466) by [@wschurman](https://github.com/wschurman))
+- Fixed `source-login-scripts.sh` ~/zlogin typo. ([#17622](https://github.com/expo/expo/pull/17622) by [@vrgimael](https://github.com/vrgimael))
+- Android: Fix asset hash storage. ([#17732](https://github.com/expo/expo/pull/17732) by [@wschurman](https://github.com/wschurman))
+- Validate asset hash against expected hash before writing file to disk. ([#17745](https://github.com/expo/expo/pull/17745) by [@wschurman](https://github.com/wschurman))
+- Fixed missing `app.manifest` on react-native 0.69 or Android Gradle Plugin 7.1+. ([#18034](https://github.com/expo/expo/pull/18034) by [@kudo](https://github.com/kudo))
+- Suppress EXUpdatesService load in Expo Go to prevent crash. ([#18056](https://github.com/expo/expo/pull/18056) by [@douglowder](https://github.com/douglowder))
+- Fix proguard support in Android builds. ([#18035](https://github.com/expo/expo/pull/18035) by [@esamelson](https://github.com/esamelson))
+
+### üí° Others
+
+- (cli) Fix help command parsing. ([#17293](https://github.com/expo/expo/pull/17293) by [@wschurman](https://github.com/wschurman))
+- [iOS] Get downloaded update IDs. ([#17817](https://github.com/expo/expo/pull/17817) by [@douglowder](https://github.com/douglowder))
+- [Android] Get downloaded update IDs. ([#17933](https://github.com/expo/expo/pull/17933) by [@douglowder](https://github.com/douglowder))
+
+## 0.13.0 ‚Äî 2022-04-21
+
+### üêõ Bug fixes
+
+- Fix asset hash validation. ([#17152](https://github.com/expo/expo/pull/17152) by [@wschurman](https://github.com/wschurman))
+
+### üí° Others
+
+- Add current and embedded update headers to manifest requests. ([#17033](https://github.com/expo/expo/pull/17033) by [@esamelson](https://github.com/esamelson))
+- Fix return value in AppDelegateSubscriber (used with expo-dev-client). ([#17111](https://github.com/expo/expo/pull/17111) by [@esamelson](https://github.com/esamelson))
+
+## 0.12.0 ‚Äî 2022-04-18
+
+### üõ† Breaking changes
+
+- Remove okhttp and okio backward compatible workaround and drop react-native 0.64 support. ([#16446](https://github.com/expo/expo/pull/16446) by [@kudo](https://github.com/kudo))
+
+### üéâ New features
+
+- Add iOS support for code signing. ([#15682](https://github.com/expo/expo/pull/15682) by [@wschurman](https://github.com/wschurman))
+- Add CLI. ([#16216](https://github.com/expo/expo/pull/16216) by [@wschurman](https://github.com/wschurman))
+- Add support for dev client auto-setup with updates integration on iOS. ([#16230](https://github.com/expo/expo/pull/16230) by [@esamelson](https://github.com/esamelson))
+- Fix codesigning header name. ([#16480](https://github.com/expo/expo/pull/16480) by [@wschurman](https://github.com/wschurman))
+- Support certificate chains (Android). ([#16375](https://github.com/expo/expo/pull/16375) by [@wschurman](https://github.com/wschurman))
+- Support certificate chains (iOS). ([#16634](https://github.com/expo/expo/pull/16634) by [@wschurman](https://github.com/wschurman))
+- Add support for expo project information certificate extension (Android). ([#16607](https://github.com/expo/expo/pull/16607) by [@wschurman](https://github.com/wschurman))
+- Add support for expo project information certificate extension (iOS). ([#16726](https://github.com/expo/expo/pull/16726) by [@wschurman](https://github.com/wschurman))
+- Pass EAS-Client-ID in header for asset and manifest requests. ([#16729](https://github.com/expo/expo/pull/16729) by [@wschurman](https://github.com/wschurman))
+- Validate expo project information up the certificate chain. ([#16800](https://github.com/expo/expo/pull/16800) by [@wschurman](https://github.com/wschurman))
+- Update CLI to separate private keys from code signing certificate. ([#16979](https://github.com/expo/expo/pull/16979) by [@wschurman](https://github.com/wschurman))
+
+### üêõ Bug fixes
+
+- Update `fbemitter` to v3. ([#16245](https://github.com/expo/expo/pull/16245) by [@SimenB](https://github.com/SimenB))
+- Allow non-codesigned manifests for Expo Go (Android). ([#16649](https://github.com/expo/expo/pull/16649) by [@wschurman](https://github.com/wschurman))
+- Allow non-codesigned manifests for Expo Go (iOS). ([#16682](https://github.com/expo/expo/pull/16682) by [@wschurman](https://github.com/wschurman))
+- Fix issue where default values for primitive-typed configuration values were not correctly set. ([#16644](https://github.com/expo/expo/pull/16644) by [@esamelson](https://github.com/esamelson))
+- Fixed iOS script phase build error when `extendedglob` is enabled in zsh config. ([#17024](https://github.com/expo/expo/pull/17024) by [@kudo](https://github.com/kudo))
+
+### üí° Others
+
+- Updated `@expo/config-plugins` from `4.0.2` to `4.0.14`, `@expo/config` from `^6.0.6` to `^6.0.14` and `@expo/metro-config` from `~0.2.6` to `~0.3.7` ([#15621](https://github.com/expo/expo/pull/15621) by [@EvanBacon](https://github.com/EvanBacon))
+- Swap out Cloudfront CDN for `classic-assets.eascdn.net`. ([#15781](https://github.com/expo/expo/pull/15781)) by [@quinlanj](https://github.com/quinlanj)
+- Add ability for expo-dev-launcher to launch a specific update through UpdatesDevLauncherController. ([#16865](https://github.com/expo/expo/pull/16865) by [@esamelson](https://github.com/esamelson))
+
+### ‚ö†Ô∏è Notices
+
+- On Android bump `compileSdkVersion` to `31`, `targetSdkVersion` to `31` and `Java` version to `11`. ([#16941](https://github.com/expo/expo/pull/16941) by [@bbarthec](https://github.com/bbarthec))
+
+### üìö 3rd party library updates
+
+- Upgrade Android `Room` library version to 2.4.2. ([#16970](https://github.com/expo/expo/pull/16970) by [@kudo](https://github.com/kudo))
+
+## 0.11.7 ‚Äî 2022-03-07
+
+### üêõ Bug fixes
+
+- Fix iOS issue where splash screen wouldn't show when using expo-updates and expo-splash-screen ([#16163](https://github.com/expo/expo/pull/16163)) by [@hannojg](https://github.com/hannojg)
+
+### üí° Others
+
+- Added `Updates.createdAt` constant export. ([#16344](https://github.com/expo/expo/pull/16344)) by [@hannojg](https://github.com/hannojg)
+
+## 0.11.6 - 2022-02-01
+
+### üêõ Bug fixes
+
+- Fix iOS launch crash when app.json `expo.updates.enabled` is false. ([#15997](https://github.com/expo/expo/pull/15997) by [@kudo](https://github.com/kudo))
+- Fix `Plugin with id 'maven' not found` build error from Android Gradle 7. ([#16080](https://github.com/expo/expo/pull/16080) by [@kudo](https://github.com/kudo))
+
+## 0.11.5 ‚Äî 2022-01-20
+
+### üêõ Bug fixes
+
+- Fix build errors on React Native 0.66 caused by `okio` and `okhttp`. ([#15632](https://github.com/expo/expo/pull/15632) by [@kudo](https://github.com/kudo))
+- Fix the `PhaseScriptExecution` build errors when the `source_login_scripts.sh` failed to load. ([#15890](https://github.com/expo/expo/pull/15890) by [@kudo](https://github.com/kudo))
+
+## 0.11.4 ‚Äî 2022-01-13
+
+### üêõ Bug fixes
+
+- Fix `IllegalThreadStateException` that occurred when creating an event to send to React Native early in the app lifecycle. ([#15880](https://github.com/expo/expo/pull/15880) by [@esamelson](https://github.com/esamelson))
+- Ensure we return early when updates are disabled on Android. ([#15882](https://github.com/expo/expo/pull/15882) by [@esamelson](https://github.com/esamelson))
+
+## 0.11.3 ‚Äî 2021-12-22
+
+### üêõ Bug fixes
+
+- Fix the view does not update from screen rotation on iOS devices. ([#15608](https://github.com/expo/expo/pull/15608) by [@kudo](https://github.com/kudo))
+- Fix building error on AArch64 JDK. ([#15669](https://github.com/expo/expo/pull/15669) by [@kudo](https://github.com/kudo))
+
+## 0.11.2 ‚Äî 2021-12-15
+
+### üêõ Bug fixes
+
+- Add missing @JvmStatic annotation to `UpdatesDevLauncherController.initialize`. ([#15561](https://github.com/expo/expo/pull/15561) by [@esamelson](https://github.com/esamelson))
+
+## 0.11.2-rc.0 ‚Äî 2021-12-13
+
+### üéâ New features
+
+- Added `Updates.channel` and `Updates.runtimeVersion` constant export. ([#15469](https://github.com/expo/expo/pull/15469) by [@jkhales](https://github.com/jkhales))
+
+## 0.11.1 ‚Äî 2021-12-08
+
+### üéâ New features
+
+- Add error recovery manager on Android. ([#15220](https://github.com/expo/expo/pull/15220) by [@esamelson](https://github.com/esamelson))
+- Hook up error recovery manager to rest of module on Android. ([#15222](https://github.com/expo/expo/pull/15222) by [@esamelson](https://github.com/esamelson))
+
+## 0.11.0 ‚Äî 2021-12-03
+
+### üõ† Breaking changes
+
+- Add local SQLite fields for error recovery manager on iOS. ([#14610](https://github.com/expo/expo/pull/14610) by [@esamelson](https://github.com/esamelson))
+- Add DB migration for above. ([#14718](https://github.com/expo/expo/pull/14718) by [@esamelson](https://github.com/esamelson))
+- Add local SQLite fields and DB migration for error recovery manager on Android. ([#15218](https://github.com/expo/expo/pull/15218) by [@esamelson](https://github.com/esamelson))
+- Add DEFAULT 0 to new error recovery DB columns. ([#15360](https://github.com/expo/expo/pull/15360) by [@esamelson](https://github.com/esamelson))
+
+### üéâ New features
+
+- Add error recovery manager on iOS. ([#14397](https://github.com/expo/expo/pull/14397) by [@esamelson](https://github.com/esamelson))
+- Hook up error recovery manager to rest of module on iOS. ([#14398](https://github.com/expo/expo/pull/14398) by [@esamelson](https://github.com/esamelson))
+- Move persisted error log to EXUpdatesErrorRecovery on iOS. ([#14399](https://github.com/expo/expo/pull/14399) by [@esamelson](https://github.com/esamelson))
+- Add native EXUpdatesCheckOnLaunch: ERROR_RECOVERY_ONLY setting on iOS. ([#14673](https://github.com/expo/expo/pull/14673) by [@esamelson](https://github.com/esamelson))
+- Small fixes for error recovery manager on iOS. ([#15223](https://github.com/expo/expo/pull/15223) by [@esamelson](https://github.com/esamelson))
+- Add native checkOnLaunch: ERROR_RECOVERY_ONLY setting on Android. ([#15219](https://github.com/expo/expo/pull/15219) by [@esamelson](https://github.com/esamelson))
+- Enhance node binary resolution for Xcode build phases scripts by the vendoring source-login-scripts.sh. ([#15336](https://github.com/expo/expo/pull/15336) by [@kudo](https://github.com/kudo))
+- Add android support for multipart manifest responses. ([#15401](https://github.com/expo/expo/pull/15401) by [@wschurman](https://github.com/wschurman))
+- Add iOS support for multipart manifest responses. ([#15426](https://github.com/expo/expo/pull/15426) by [@wschurman](https://github.com/wschurman))
+- Add android support for code signing. ([#15514](https://github.com/expo/expo/pull/15514) by [@wschurman](https://github.com/wschurman))
+
+### üêõ Bug fixes
+
+- Fix auto setup `EXUpdatesAppDelegate` breaking reanimated installation. ([#14755](https://github.com/expo/expo/pull/14755) by [@kudo](https://github.com/kudo))
+- Fix support for `react.entryFile` gradle config. ([#14934](https://github.com/expo/expo/pull/14934) by [@EvanBacon](https://github.com/EvanBacon))
+- Fix Android app.manifest not generated when in OneSignal gradle plugin integration. ([#14938](https://github.com/expo/expo/pull/14938) by [@kudo](https://github.com/kudo))
+- Fix Android app.manifest not generated from [#14938](https://github.com/expo/expo/pull/14938) regression. ([#14953](https://github.com/expo/expo/pull/14953) by [@kudo](https://github.com/kudo))
+- Fix iOS app.manifest generation error in `eas build --local` mode. ([#14956](https://github.com/expo/expo/pull/14956) by [@kudo](https://github.com/kudo))
+- Fix handling of unexpectedly missing assets on iOS. ([#15008](https://github.com/expo/expo/pull/15008) by [@esamelson](https://github.com/esamelson))
+- Fix issue with assets that are duplicated in the local SQLite db being reaped when they are still in use. ([#15049](https://github.com/expo/expo/pull/15049) by [@esamelson](https://github.com/esamelson))
+- Retain embedded asset fields when merging existing asset entities on Android. ([#15123](https://github.com/expo/expo/pull/15123) by [@esamelson](https://github.com/esamelson))
+- Fix `RCTBridge` initialized twice on startup. ([#15142](https://github.com/expo/expo/pull/15142) by [@kudo](https://github.com/kudo))
+
+### üí° Others
+
+- Add error when entryfile is not found in expo-updates scripts. ([#15234](https://github.com/expo/expo/pull/15234) by [@AamuLumi](https://github.com/AamuLumi))
+- Update `@expo/config` and `@expo/metro-config` dependencies. ([#14801](https://github.com/expo/expo/pull/14801) by [@Simek](https://github.com/Simek))
+- Refactor and unify Loader classes on Android. ([#14334](https://github.com/expo/expo/pull/14334) by [@esamelson](https://github.com/esamelson))
+- Kotlinize expo-updates. ([#14818](https://github.com/expo/expo/pull/14334) by [@wschurman](https://github.com/wschurman))
+
+## 0.10.9 ‚Äî 2021-10-29
+
+_This version does not introduce any user-facing changes._
+
+## 0.10.8 ‚Äî 2021-10-29
+
+### üêõ Bug fixes
+
+- Fix Android app.manifest not generated from [#14938](https://github.com/expo/expo/pull/14938) regression. ([#14953](https://github.com/expo/expo/pull/14953) by [@kudo](https://github.com/kudo))
+- Fix iOS app.manifest generation error in `eas build --local` mode. ([#14956](https://github.com/expo/expo/pull/14956) by [@kudo](https://github.com/kudo))
+
+## 0.10.7 ‚Äî 2021-10-29
+
+_This version does not introduce any user-facing changes._
+
+## 0.10.6 ‚Äî 2021-10-28
+
+### üêõ Bug fixes
+
+- Fix Android app.manifest not generated when in OneSignal gradle plugin integration. ([#14938](https://github.com/expo/expo/pull/14938) by [@kudo](https://github.com/kudo))
+
+## 0.10.5 ‚Äî 2021-10-21
+
+_This version does not introduce any user-facing changes._
+
+## 0.10.4 ‚Äî 2021-10-15
+
+### üêõ Bug fixes
+
+- Fix auto setup `EXUpdatesAppDelegate` breaking reanimated installation. ([#14755](https://github.com/expo/expo/pull/14755) by [@kudo](https://github.com/kudo))
+
+## 0.10.3 ‚Äî 2021-10-12
+
+### üêõ Bug fixes
+
+- Fix `Updates.reloadAsync` behavior in bare apps when a new update is available (downloaded). ([#14706](https://github.com/expo/expo/pull/14706) by [@esamelson](https://github.com/esamelson))
+
+## 0.10.2 ‚Äî 2021-10-01
+
+### üêõ Bug fixes
+
+- Fix expo-screen-orientation breaking for expo-updates + expo-splash-screen integration. ([#14519](https://github.com/expo/expo/pull/14519) by [@kudo](https://github.com/kudo))
+
+## 0.10.1 ‚Äî 2021-09-28
+
+### üéâ New features
+
+- [android] Make asset "type" key nullable ([#14499](https://github.com/expo/expo/pull/14499) by [@jkhales](https://github.com/jkhales))
+
+## 0.10.0 ‚Äî 2021-09-28
+
+### üêõ Bug fixes
+
+- Fix building errors from use_frameworks! in Podfile. ([#14523](https://github.com/expo/expo/pull/14523) by [@kudo](https://github.com/kudo))
+
+### üí° Others
+
+- Updated `@expo/config`, `@expo/webpack-config`, `@expo/metro-config` ([#14443](https://github.com/expo/expo/pull/14443) by [@EvanBacon](https://github.com/EvanBacon))
+
+## 0.9.3 ‚Äî 2021-09-16
+
+_This version does not introduce any user-facing changes._
+
+## 0.9.2 ‚Äî 2021-09-16
+
+### üõ† Breaking changes
+
+- Dropped support for iOS 11.0 ([#14383](https://github.com/expo/expo/pull/14383) by [@cruzach](https://github.com/cruzach))
+
+### üêõ Bug fixes
+
+- Fixing app.manifest does not generated from Xcode build phase script. ([#14438](https://github.com/expo/expo/pull/14438) by [@kudo](https://github.com/kudo))
+
+## 0.9.1 ‚Äî 2021-09-09
+
+_This version does not introduce any user-facing changes._
+
+## 0.9.0 ‚Äî 2021-09-09
+
+### üéâ New features
+
+- Updated `@expo/config-plugins` from `3.1.0` to `4.0.2` ([#14788](https://github.com/expo/expo/pull/14788) by [@jkhales](https://github.com/jkhales))
+- Version expo-updates plugin by importing from @expo/config-plugins@3.0.7. This allows the update url to be defined in app.confg ([#13981](https://github.com/expo/expo/pull/13981) by [@jkhales](https://github.com/jkhales))
+- Store assets with filename = key.fileExtension. ([#13801](https://github.com/expo/expo/pull/13801) by [@jkhales](https://github.com/jkhales))
+- Use stable manifest ID where applicable. ([#12964](https://github.com/expo/expo/pull/12964) by [@wschurman](https://github.com/wschurman))
+- Update NewManifest field paths for new extra field format. ([#13398](https://github.com/expo/expo/pull/13398) by [@wschurman](https://github.com/wschurman))
+- Update location of EAS projectId in new manifest. ([#13739](https://github.com/expo/expo/pull/13739) by [@wschurman](https://github.com/wschurman))
+- Update location of scopeKey in new manifest. ([#13817](https://github.com/expo/expo/pull/13817) by [@wschurman](https://github.com/wschurman))
+- Introduce automatically setup where iOS AppDelegate or Android MainApplication customization is not necessary. ([#14198](https://github.com/expo/expo/pull/14198) by [@kudo](https://github.com/kudo))
+
+### üêõ Bug fixes
+
+- Fix `PROJECT_ROOT` path resolution in `create-manifest-ios.sh` and in `createManifest.js` ([#13439](https://github.com/expo/expo/pull/13439) by [@ajsmth](https://github.com/ajsmth))
+- Fix erroneous manifest JSON direct access. ([#13906](https://github.com/expo/expo/pull/13906) by [@wschurman](https://github.com/wschurman))
+- Fixed `userInterfaceStyle` not being applied when only set in root `expo` options and not in `expo.android` options. ([#13959](https://github.com/expo/expo/pull/13959) by [@mrousavy](https://github.com/mrousavy))
+
+## 0.8.5 ‚Äî 2021-09-02
+
+### üí° Others
+
+- Skip running build scripts during iOS debug builds and add support for `SKIP_BUNDLING`/`FORCE_BUNDLING` environment variables. ([#14116](https://github.com/expo/expo/pull/14116) by [@fson](https://github.com/fson))
+
+## 0.8.4 ‚Äî 2021-08-06
+
+### üêõ Bug fixes
+
+- Fix config plugin to properly set the updates URL based on `getAccountUsername` from `@expo/config`. ([#13909](https://github.com/expo/expo/pull/13909) by [@brentvatne](https://github.com/brentvatne))
+- Fixed issue with dev-launcher integration where configuration was not set at the correct time, which caused issues when trying to open multiple different published apps. ([#13926](https://github.com/expo/expo/pull/13926) by [@esamelson](https://github.com/esamelson))
+
+## 0.8.3 ‚Äî 2021-07-28
+
+### üõ† Breaking changes
+
+- Revert [#12734](https://github.com/expo/expo/pull/12734). expo-asset@8.3.3 or above requires expo-updates to specify assets with file extensions. ([#13733](https://github.com/expo/expo/pull/13733) by [@jkhales](https://github.com/jkhales))
+
+## 0.8.2 ‚Äî 2021-07-13
+
+### üêõ Bug fixes
+
+- Remove usage of deprecated `[RCTBridge reload]` method. ([#13501](https://github.com/expo/expo/pull/13501) by [@esamelson](https://github.com/esamelson))
+- Remove side effects from UpdatesDevLauncherController.initialize() method. ([#13555](https://github.com/expo/expo/pull/13555) by [@esamelson](https://github.com/esamelson))
+
+## 0.8.1 ‚Äî 2021-07-08
+
+_This version does not introduce any user-facing changes._
+
+## 0.8.0 ‚Äî 2021-06-24
+
+### üõ† Breaking changes
+
+- Added reset method to UpdatesDevLauncherController. ([#13346](https://github.com/expo/expo/pull/13346) by [@esamelson](https://github.com/esamelson))
+
+## 0.7.3 ‚Äî 2021-06-24
+
+_This version does not introduce any user-facing changes._
+
+## 0.7.2 ‚Äî 2021-06-23
+
+_This version does not introduce any user-facing changes._
+
+## 0.7.1 ‚Äî 2021-06-22
+
+### üêõ Bug fixes
+
+- Improve behavior of dev client (with updates integration) when developer is logged out of expo-cli. ([#13310](https://github.com/expo/expo/pull/13310) by [@esamelson](https://github.com/esamelson))
+
+## 0.7.0 ‚Äî 2021-06-16
+
+### üéâ New features
+
+- Backport runtimeVersion to classic Updates ([#13283](https://github.com/expo/expo/pull/13283) by [@jkhales](https://github.com/jkhales))
+
+## 0.7.0-rc.2 ‚Äî 2021-06-10
+
+### üõ† Breaking changes
+
+- Renamed the iOS protocol in expo-updates-interface to EXUpdatesExternalInterface. ([#13214](https://github.com/expo/expo/pull/13214) by [@esamelson](https://github.com/esamelson))
+
+## 0.7.0-rc.1 ‚Äî 2021-06-08
+
+### üêõ Bug fixes
+
+- Fixed prebuild issues with missing imports.
+
+## 0.7.0-rc.0 ‚Äî 2021-06-08
+
+### üõ† Breaking changes
+
+- Rename new manifest field updateMetadata to metadata ([#12831](https://github.com/expo/expo/pull/12831) by [@jkhales](https://github.com/jkhales))
+- Save asset with a key that does not include an extension. This introduces an implicit dependency on expo-asset@8.3.2 or above. ([#12734](https://github.com/expo/expo/pull/12734) by [@jkhales](https://github.com/jkhales))
+- Add last_accessed column to updates table schema, and rename metadata -> manifest. ([#12768](https://github.com/expo/expo/pull/12768) by [@esamelson](https://github.com/esamelson))
+- Add non-destructive database migration for the above change. ([#12820](https://github.com/expo/expo/pull/12820) by [@esamelson](https://github.com/esamelson))
+- Add new manifest2 field and make existing field optional. ([#12817](https://github.com/expo/expo/pull/12817) by [@wschurman](https://github.com/wschurman))
+
+### üéâ New features
+
+- Convert manifest definitions and tests to kotlin. ([#12479](https://github.com/expo/expo/pull/12479) by [@wschurman](https://github.com/wschurman))
+- Start converting untyped manifest JSON objects into well-specified classes. ([#12506](https://github.com/expo/expo/pull/12506) by [@wschurman](https://github.com/wschurman))
+- Finish conversion to an interface for raw manifests. ([#12509](https://github.com/expo/expo/pull/12509) by [@wschurman](https://github.com/wschurman))
+- Add support for loading new manifests in Expo Go. ([#12521](https://github.com/expo/expo/pull/12521) by [@wschurman](https://github.com/wschurman))
+- Split SelectionPolicy into 3 separate interfaces. (Android: [#12606](https://github.com/expo/expo/pull/12606) and iOS: [#12682](https://github.com/expo/expo/pull/12682) by [@esamelson](https://github.com/esamelson))
+- Add DatabaseIntegrityCheck and tests. (Android: [#12607](https://github.com/expo/expo/pull/12607) and [#12754](https://github.com/expo/expo/pull/12754), and iOS: [#12683](https://github.com/expo/expo/pull/12683) by [@esamelson](https://github.com/esamelson))
+- Add onAssetLoaded progress callback to remote loader. (Android: [#12608](https://github.com/expo/expo/pull/12608) and iOS: [#12684](https://github.com/expo/expo/pull/12684) by [@esamelson](https://github.com/esamelson))
+- Add setter and resetter for SelectionPolicy. (Android: [#12609](https://github.com/expo/expo/pull/12609) and iOS: [#12685](https://github.com/expo/expo/pull/12685) by [@esamelson](https://github.com/esamelson))
+- Convert most remaining usages of JSON manifest to RawManifest. ([#12600](https://github.com/expo/expo/pull/12600) by [@wschurman](https://github.com/wschurman))
+- Factor out raw manifest into wrapper class. ([#12631](https://github.com/expo/expo/pull/12631) by [@wschurman](https://github.com/wschurman))
+- Remove code to handle nested root level manifest key. ([#12736](https://github.com/expo/expo/pull/12736) by [@wschurman](https://github.com/wschurman))
+- Move scope check from reaper to selection policy. ([#12769](https://github.com/expo/expo/pull/12769) by [@esamelson](https://github.com/esamelson))
+- Add ReaperSelectionPolicyDevelopmentClient, implement in Expo Go. ([#12770](https://github.com/expo/expo/pull/12770) by [@esamelson](https://github.com/esamelson))
+- Add UpdatesDevLauncherController for development client integration. (Android: [#13032](https://github.com/expo/expo/pull/13032) and iOS: ([#13112](https://github.com/expo/expo/pull/13112)) by [@esamelson](https://github.com/esamelson))
+
+### üêõ Bug fixes
+
+- Enable kotlin in all modules. ([#12716](https://github.com/expo/expo/pull/12716) by [@wschurman](https://github.com/wschurman))
+- Rename Update.metadata -> manifest in internal module classes. ([#12818](https://github.com/expo/expo/pull/12818) by [@esamelson](https://github.com/esamelson))
+- Reset selection policy in UpdatesDevLauncherController ([#13113](https://github.com/expo/expo/pull/13113) by [@esamelson](https://github.com/esamelson))
+- UpdatesDevLauncherController: make Update nullable in onSuccess callback ([#13136](https://github.com/expo/expo/pull/13136) by [@esamelson](https://github.com/esamelson))
+
+### üí° Others
+
+- Refactored uuid imports to v7 style. ([#13037](https://github.com/expo/expo/pull/13037) by [@giautm](https://github.com/giautm))
+
+## 0.6.0 ‚Äî 2021-04-13
+
+### üõ† Breaking changes
+
+- (android) remove UPDATES_CONFIGURATION_USES_LEGACY_MANIFEST_KEY constant and start respecting cache-control headers for all manifest responses. Please ensure your server defined cache-control headers are configured correctly if you are self-hosted to avoid issues such as [#13872](https://github.com/expo/expo/issues/13872) ([#12181](https://github.com/expo/expo/pull/12181) by [@jkhales](https://github.com/jkhales))
+- (ios) remove EXUpdatesUsesLegacyManifest Plist constant and start respecting cache-control headers for all manifest responses Please ensure your server defined cache-control headers are configured correctly if you are self-hosted to avoid issues such as [#13872](https://github.com/expo/expo/issues/13872) ([#12249](https://github.com/expo/expo/pull/12249) by [@jkhales](https://github.com/jkhales))
+- crash if EXUpdatesRequestHeaders is not a dictionary (ios). ([#12457](https://github.com/expo/expo/pull/12457) by [@jkhales](https://github.com/jkhales))
+
+### üéâ New features
+
+- add method to read stringified requestHeaders. ([#12229](https://github.com/expo/expo/pull/12229) by [@jkhales](https://github.com/jkhales))
+
+### üêõ Bug fixes
+
+- Fixed Updates module methods in Android Expo Go by refactoring FileDownloader to have mostly instance methods rather than static methods.
+- Fixed local assets URIs on Android to be compliant with File URI specification. Now file URI takes the form of `file:///*` instead of `file:/*`. ([#12428](https://github.com/expo/expo/pull/12428) by [@tsapeta](https://github.com/tsapeta))
+- Fixed Updates module methods not rejecting properly in iOS managed workflow apps where updates are disabled.
+- Fixed uncaught exception in parseDateString on Android API 21-23. ([#12492](https://github.com/expo/expo/pull/12492) by [mrs2296](https://github.com/mrs2296))
+- Improved error message in createManifest script when there is an error getting the project's metro config.
+
+## 0.5.3 ‚Äî 2021-03-30
+
+_This version does not introduce any user-facing changes._
+
+## 0.5.2 ‚Äî 2021-03-23
+
+### üéâ New features
+
+- Updated `@expo/metro-config` with deprecated `.expo.*` extension support and improved error stack traces. ([#12252](https://github.com/expo/expo/pull/12252) by [@EvanBacon](https://github.com/EvanBacon))
+- Wrap native bundle script error in regex. ([#12185](https://github.com/expo/expo/pull/12185) by [@EvanBacon](https://github.com/EvanBacon))
+
+## 0.5.1 ‚Äî 2021-03-11
+
+### üêõ Bug fixes
+
+- Add prebuilt xcframework
+
+## 0.5.0 ‚Äî 2021-03-10
+
+### ‚ö†Ô∏è Notices
+
+- The package is now shipped with prebuilt binaries on iOS. You can read more about it on [expo.fyi/prebuilt-modules](https://expo.fyi/prebuilt-modules). ([#11224](https://github.com/expo/expo/pull/11224) by [@tsapeta](https://github.com/tsapeta))
+
+### üõ† Breaking changes
+
+- Dropped support for iOS 10.0 ([#11344](https://github.com/expo/expo/pull/11344) by [@tsapeta](https://github.com/tsapeta))
+
+### üéâ New features
+
+- Created config plugin. ([#11981](https://github.com/expo/expo/pull/11981) by [@EvanBacon](https://github.com/EvanBacon))
+- Updated Android build configuration to target Android 11 (added support for Android SDK 30). ([#11647](https://github.com/expo/expo/pull/11647) by [@bbarthec](https://github.com/bbarthec))
+- Added alpha support for EAS update manifest format ([#11050](https://github.com/expo/expo/pull/11050) by [@esamelson](https://github.com/esamelson))
+- add ability for android clients to handle header signatures. ([#11897](https://github.com/expo/expo/pull/11897) by [@jkhales](https://github.com/jkhales))
+- Added `SelectionPolicyFilterAware` to support EAS Update's manifest filters feature ([#11748](https://github.com/expo/expo/pull/11748) by [@esamelson](https://github.com/esamelson))
+- Parse & persist data from EAS Update manifest headers ([#11961](https://github.com/expo/expo/pull/11961), [#11967](https://github.com/expo/expo/pull/11967), and [#12026](https://github.com/expo/expo/pull/12026) by [@esamelson](https://github.com/esamelson))
+- Accept signature in header (iOS). ([#11930](https://github.com/expo/expo/pull/11930) by [@jkhales](https://github.com/jkhales))
+- Switch to SelectionPolicyFilterAware and use persisted manifest filters ([#11993](https://github.com/expo/expo/pull/11993) by [@esamelson](https://github.com/esamelson))
+- Make manifest filters key search case-insensitive ([#12015](https://github.com/expo/expo/pull/12015) by [@esamelson](https://github.com/esamelson))
+- Send persisted serverDefinedHeaders in manifest requests ([#11994](https://github.com/expo/expo/pull/11994) by [@esamelson](https://github.com/esamelson))
+- Only require signatures with expo go (android). ([#12027](https://github.com/expo/expo/pull/12027) by [@jkhales](https://github.com/jkhales))
+- Only require signatures with expo go (iOS). ([#12072](https://github.com/expo/expo/pull/12072) by [@jkhales](https://github.com/jkhales))
+- Make asset keys nullable ([#12110](https://github.com/expo/expo/pull/12110) and [#12111](https://github.com/expo/expo/pull/12111) by [@esamelson](https://github.com/esamelson))
+
+### üêõ Bug fixes
+
+- Removed `fbjs` dependency ([#11396](https://github.com/expo/expo/pull/11396) by [@cruzach](https://github.com/cruzach))
+- On iOS, use default NSURLCache for manifest public key rather than caching it manually.
+- Use `console.warn` message rather than hard crashing if neither runtime nor SDK version are configured (requires a corresponding update to the `expo` package) ([#11367](https://github.com/expo/expo/pull/11367) by [@esamelson](https://github.com/esamelson))
+- Fixed discrepancies across platforms regarding required fields in manifests ([#11562](https://github.com/expo/expo/pull/11562) by [@esamelson](https://github.com/esamelson))
+- Improved support for `assetUrlOverride` in legacy self-hosted apps ([#11601](https://github.com/expo/expo/pull/11601))
+- Stop expecting data and publicManifest root level keys for EAS manifests ([#11613](https://github.com/expo/expo/pull/11613) by [@esamelson](https://github.com/esamelson))
+- Stop overriding cache-control headers for non-legacy manifests ([#11875](https://github.com/expo/expo/pull/11875) by [@esamelson](https://github.com/esamelson))
+- Remove peerDependencies and unimodulePeerDependencies from Expo modules. ([#11980](https://github.com/expo/expo/pull/11980) by [@brentvatne](https://github.com/brentvatne))
+
+## 0.4.2 - 2020-02-16
+
+### üéâ New features
+
+- Keep current update and one older update, for safety and to make rollbacks faster ([#11449](https://github.com/expo/expo/pull/11449) by [@esamelson](https://github.com/esamelson))
+
+### üêõ Bug fixes
+
+- Improved thread safety around reaping ([#11447](https://github.com/expo/expo/pull/11447) by [@esamelson](https://github.com/esamelson))
+- Fixed support for Android Gradle plugin 4.1+ ([#11926](https://github.com/expo/expo/pull/11926) by [@esamelson](https://github.com/esamelson))
+
+## 0.4.1 ‚Äî 2020-11-25
+
+### üõ† Breaking changes
+
+- This version adds an internal database migration, which means that when a user's device upgrades from an app with `expo-updates@0.3.x` to an app with `expo-updates@0.4.x`, any updates they had previously downloaded will no longer be accessible.
+  - For **managed workflow apps**, this is inconsequential as this upgrade will be part of a major SDK version upgrade. You do not need to do anything if your app is made using the managed workflow.
+  - For **bare workflow apps**, this means updates downloaded on clients running `expo-updates@0.3.x` will need to be redownloaded in order to run after those clients are upgraded to `expo-updates@0.4.x`. We recommend incrementing your runtime/SDK version after updating to `expo-updates@0.4.x`, and republishing any OTA updates that you do not intend to distribute embedded in your application binary.
+
+## 0.4.0 ‚Äî 2020-11-17
+
+### üõ† Breaking changes
+
+- On iOS enabled `use_frameworks!` usage by replacing `React` dependency with `React-Core`. ([#11057](https://github.com/expo/expo/pull/11057) by [@bbarthec](https://github.com/bbarthec))
+
+### üêõ Bug fixes
+
+- Fixed issue in **managed workflow** where `reloadAsync` doesn't reload the app if called immediately after the app starts. ([#10917](https://github.com/expo/expo/pull/10917) and [#10918](https://github.com/expo/expo/pull/10918) by [@esamelson](https://github.com/esamelson))
+
+## 0.3.5 ‚Äî 2020-10-02
+
+_This version does not introduce any user-facing changes._
+
+## 0.3.4 ‚Äî 2020-09-22
+
+### üêõ Bug fixes
+
+- Fixed `NSInvalidArgumentException` being thrown in bare applications on iOS (unrecognized selector `appLoaderTask:didFinishBackgroundUpdateWithStatus:update:error:` sent to instance of `EXUpdatesAppController`). ([#10289](https://github.com/expo/expo/issues/10289) by [@sjchmiela](https://github.com/sjchmiela))
+
+## 0.3.3 ‚Äî 2020-09-21
+
+_This version does not introduce any user-facing changes._
+
+## 0.3.2 ‚Äî 2020-09-16
+
+_This version does not introduce any user-facing changes._
+
+## 0.3.1 ‚Äî 2020-08-26
+
+_This version does not introduce any user-facing changes._
+
+## 0.3.0 ‚Äî 2020-08-18
+
+### üéâ New features
+
+- Easier to follow installation instructions by moving them to the Expo documentation ([#9145](https://github.com/expo/expo/pull/9145)).
+
+## 0.2.12 ‚Äî 2020-07-24
+
+### üêõ Bug fixes
+
+- Fetch asset manifest through programmatic CLI interface instead of depending on a running React Native CLI server, so `./gradlew :app:assembleRelease` works as expected without needing to run `react-native start` beforehand. ([#9372](https://github.com/expo/expo/pull/9372)).
+
+## 0.2.11 ‚Äî 2020-06-29
+
+### üêõ Bug fixes
+
+- Fixed an issue where the publish workflow was broken on Android. Note that the publish workflow will not be supported in a future version of expo-updates, so we recommend [switching to the no-publish workflow](https://blog.expo.dev/over-the-air-updates-from-expo-are-now-even-easier-to-use-376e2213fabf).
+
+## 0.2.10 ‚Äî 2020-06-23
+
+### üêõ Bug fixes
+
+- Fixed reading the `expo.modules.updates.ENABLED` setting from AndroidManifest.xml.
+- Improved the error message logged when an embedded manifest cannot be found.
+
+## 0.2.9 ‚Äî 2020-06-15
+
+### üêõ Bug fixes
+
+- Fixed issue where launch screen on iOS doesn't show whilst updates are being retrieved if it is contained within a storyboard instead of a nib. ([#8750](https://github.com/expo/expo/pull/8750) by [@MattsTheChief](https://github.com/MattsTheChief))
+- Fixed an issue where the REACT_NATIVE_PACKAGER_HOSTNAME env var was not respected in the build scripts for iOS or Android.
+
+## 0.2.8 ‚Äî 2020-05-29
+
+_This version does not introduce any user-facing changes._
+
+## 0.2.7 - 2020-05-27
+
+### üêõ Bug fixes
+
+- Added a better error message to the `create-manifest-ios.sh` script in case the Xcode shell cannot find the node binary.
+- Added an optional `bundleIn${targetName}` field to Gradle build script config. ([#8464](https://github.com/expo/expo/pull/8464) by [@rickysullivan](https://github.com/rickysullivan))
+- Fixed a bug on iOS with bundling assets from outside the project root.
+
+## 0.2.6 ‚Äî 2020-05-27
+
+_This version does not introduce any user-facing changes._
+
+## 0.2.5
+
+### üêõ Bug fixes
+
+- Fixed broken Android builds on Windows.
+
+## 0.2.4
+
+### üêõ Bug fixes
+
+- Support monorepos ([#8419](https://github.com/expo/expo/pull/8419) by [@janicduplessis](https://github.com/janicduplessis))
+- Support entry file configuration in Xcode/gradle build scripts ([#8415](https://github.com/expo/expo/pull/8415) and [#8418](https://github.com/expo/expo/pull/8418) by [@janicduplessis](https://github.com/janicduplessis))
+- Added a more helpful error message when trying to run a build without the packager server running.
+
+## 0.2.3
+
+### üêõ Bug fixes
+
+- Temporarily vendor `filterPlatformAssetScales` method from `@react-native-community/cli` in order to fix builds when `npm` was used to install dependencies (rather than `yarn`).
+- Fixed an issue on iOS where calling the JS module methods in development mode, after publishing at least one update, would crash the app.
+
+## 0.2.2
+
+### üêõ Bug fixes
+
+- Fixed an issue on iOS where expo-updates expected more assets to be embedded than actually are by the React Native CLI.
+- Added a better error message on iOS when embedded assets are missing.
+
+## 0.2.1
+
+### üêõ Bug fixes
+
+- Added a better error message to the `createManifest` script when project does not have the `hashAssetFiles` plugin configured.
+
+## 0.2.0
+
+### üéâ New features
+
+- Added support for the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For more information, along with upgrade instructions if you're upgrading from 0.1.x and would like to use the no-publish workflow, read [this blog post](https://blog.expo.dev/over-the-air-updates-from-expo-are-now-even-easier-to-use-376e2213fabf).
+- Added `Updates.updateId` and `Updates.releaseChannel` constant exports
+
+### üêõ Bug fixes
+
+- Fixed an issue with recovering from an unexpectedly deleted asset on iOS.
+- Fixed handling of invalid EXPO_UDPATE_URL values on Android.
+- Updates Configuration Conditional From Equal To Prefix Check. ([#8225](https://github.com/expo/expo/pull/8225) by [@thorbenprimke](https://github.com/thorbenprimke))
+
+## 0.1.3
+
+### üêõ Bug fixes
+
+- Fixed some issues with `runtimeVersion` on Android for apps using `expo export`.
+
+## 0.1.2
+
+### üêõ Bug fixes
+
+- Fixed SSR support on Web. ([#7625](https://github.com/expo/expo/pull/7625) by [@EvanBacon](https://github.com/EvanBacon))
+
+## 0.1.1
+
+### üêõ Bug fixes
+
+- Fixed 'unable to resolve class GradleVersion' when using Gradle 5. ([#7577](https://github.com/expo/expo/pull/7577) by [@IjzerenHein](https://github.com/IjzerenHein))
+
+## 0.1.0
+
+Initial public beta üéâ
diff --git a/node_modules/expo-updates/CHANGELOG.md.rej b/node_modules/expo-updates/CHANGELOG.md.rej
new file mode 100644
index 0000000..916777a
--- /dev/null
+++ b/node_modules/expo-updates/CHANGELOG.md.rej
@@ -0,0 +1,16 @@
+***************
+*** 12,17 ****
+  
+  - Add rollback to embedded update directive. ([#21007](https://github.com/expo/expo/pull/21007), [#21652](https://github.com/expo/expo/pull/21652) by [@wschurman](https://github.com/wschurman))
+  - Add support for extra params. ([#21837](https://github.com/expo/expo/pull/21837) by [@wschurman](https://github.com/wschurman))
+  
+  ### üêõ Bug fixes
+  
+--- 12,18 ----
+  
+  - Add rollback to embedded update directive. ([#21007](https://github.com/expo/expo/pull/21007), [#21652](https://github.com/expo/expo/pull/21652) by [@wschurman](https://github.com/wschurman))
+  - Add support for extra params. ([#21837](https://github.com/expo/expo/pull/21837) by [@wschurman](https://github.com/wschurman))
++ - New useUpdates() JS API. ([#21880](https://github.com/expo/expo/pull/21880) by [@douglowder](https://github.com/douglowder))
+  
+  ### üêõ Bug fixes
+  
diff --git a/node_modules/expo-updates/build/Updates.d.ts.map.orig b/node_modules/expo-updates/build/Updates.d.ts.map.orig
new file mode 100644
index 0000000..26a3075
--- /dev/null
+++ b/node_modules/expo-updates/build/Updates.d.ts.map.orig
@@ -0,0 +1 @@
+{"version":3,"file":"Updates.d.ts","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AAMA,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAG5D,OAAO,EACL,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,WAAW,EACX,iBAAiB,EACjB,eAAe,EAChB,MAAM,iBAAiB,CAAC;AAEzB,cAAc,iBAAiB,CAAC;AAEhC;;;;;GAKG;AACH,eAAO,MAAM,QAAQ,EAAE,MAAM,GAAG,IAGtB,CAAC;AAEX;;;GAGG;AACH,eAAO,MAAM,cAAc,EAAE,MAAgD,CAAC;AAE9E;;GAEG;AACH,eAAO,MAAM,OAAO,EAAE,MAAM,GAAG,IAAkC,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,MAAM,GAAG,IAAyC,CAAC;AAGhF;;GAEG;AACH,eAAO,MAAM,WAAW,EAAE,WAA2C,CAAC;AAEtE;;;;;;;;GAQG;AACH,eAAO,MAAM,iBAAiB,EAAE,OAAgD,CAAC;AAEjF;;;GAGG;AACH,eAAO,MAAM,gBAAgB,EAAE,OAA+C,CAAC;AAG/E;;GAEG;AACH,eAAO,MAAM,qBAAqB,EAAE,OAAoD,CAAC;AAEzF;;;;;;;GAOG;AACH,eAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAEnC,CAAC;AAEL;;;;;GAKG;AACH,eAAO,MAAM,SAAS,EAAE,IAAI,GAAG,IAEvB,CAAC;AAUT;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAsB,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAWjD;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBtE;AAED;;;;;;;;GAQG;AACH,wBAAsB,mBAAmB,CAAC,MAAM,GAAE,MAAgB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,CAK9F;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,oBAAoB,IAAI,OAAO,CAAC,IAAI,CAAC,CAK1D;AAED;;;;;;;;;GASG;AACH,wBAAsB,gBAAgB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBnE;AAED;;GAEG;AACH,wBAAgB,iCAAiC,CAAC,WAAW,CAAC,EAAE,MAAM,QAIrE;AA4BD;;;;;;;;;GASG;AACH,wBAAgB,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,WAAW,KAAK,IAAI,GAAG,iBAAiB,CAGrF"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.d.ts.map.rej b/node_modules/expo-updates/build/Updates.d.ts.map.rej
new file mode 100644
index 0000000..86295de
--- /dev/null
+++ b/node_modules/expo-updates/build/Updates.d.ts.map.rej
@@ -0,0 +1,4 @@
+***************
+*** 1 ****
+- {"version":3,"file":"Updates.d.ts","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AAMA,OAAO,EAAgB,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAG5D,OAAO,EACL,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,WAAW,EACX,iBAAiB,EACjB,eAAe,EAChB,MAAM,iBAAiB,CAAC;AAEzB,cAAc,iBAAiB,CAAC;AAEhC;;;;;GAKG;AACH,eAAO,MAAM,QAAQ,EAAE,MAAM,GAAG,IAGtB,CAAC;AAEX;;;GAGG;AACH,eAAO,MAAM,cAAc,EAAE,MAAgD,CAAC;AAE9E;;GAEG;AACH,eAAO,MAAM,OAAO,EAAE,MAAM,GAAG,IAAkC,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,MAAM,GAAG,IAAyC,CAAC;AAGhF;;GAEG;AACH,eAAO,MAAM,WAAW,EAAE,WAA2C,CAAC;AAEtE;;;;;;;;GAQG;AACH,eAAO,MAAM,iBAAiB,EAAE,OAAgD,CAAC;AAEjF;;;GAGG;AACH,eAAO,MAAM,gBAAgB,EAAE,OAA+C,CAAC;AAG/E;;GAEG;AACH,eAAO,MAAM,qBAAqB,EAAE,OAAoD,CAAC;AAEzF;;;;;;;GAOG;AACH,eAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAEnC,CAAC;AAEL;;;;;GAKG;AACH,eAAO,MAAM,SAAS,EAAE,IAAI,GAAG,IAEvB,CAAC;AAUT;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAsB,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAWjD;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBtE;AAED;;GAEG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC,CAM9E;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,kBAAkB,CACtC,GAAG,EAAE,MAAM,EACX,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,SAAS,GAC/B,OAAO,CAAC,IAAI,CAAC,CAMf;AAED;;;;;;;;GAQG;AACH,wBAAsB,mBAAmB,CAAC,MAAM,GAAE,MAAgB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,CAK9F;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,oBAAoB,IAAI,OAAO,CAAC,IAAI,CAAC,CAK1D;AAED;;;;;;;;;GASG;AACH,wBAAsB,gBAAgB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBnE;AAED;;GAEG;AACH,wBAAgB,iCAAiC,CAAC,WAAW,CAAC,EAAE,MAAM,QAIrE;AA4BD;;;;;;;;;GASG;AACH,wBAAgB,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,WAAW,KAAK,IAAI,GAAG,iBAAiB,CAGrF"}--- 1 ----
++ {"version":3,"file":"Updates.d.ts","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAG9C,OAAO,EACL,WAAW,EACX,QAAQ,EACR,iBAAiB,EACjB,WAAW,EACX,iBAAiB,EACjB,eAAe,EAChB,MAAM,iBAAiB,CAAC;AAGzB,cAAc,iBAAiB,CAAC;AAEhC;;;;;GAKG;AACH,eAAO,MAAM,QAAQ,EAAE,MAAM,GAAG,IAGtB,CAAC;AAEX;;;GAGG;AACH,eAAO,MAAM,cAAc,EAAE,MAAgD,CAAC;AAE9E;;GAEG;AACH,eAAO,MAAM,OAAO,EAAE,MAAM,GAAG,IAAkC,CAAC;AAElE;;GAEG;AACH,eAAO,MAAM,cAAc,EAAE,MAAM,GAAG,IAAyC,CAAC;AAGhF;;GAEG;AACH,eAAO,MAAM,WAAW,EAAE,WAA2C,CAAC;AAEtE;;;;;;;;GAQG;AACH,eAAO,MAAM,iBAAiB,EAAE,OAAgD,CAAC;AAEjF;;;GAGG;AACH,eAAO,MAAM,gBAAgB,EAAE,OAA+C,CAAC;AAG/E;;GAEG;AACH,eAAO,MAAM,qBAAqB,EAAE,OAAoD,CAAC;AAEzF;;;;;;;GAOG;AACH,eAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAEnC,CAAC;AAEL;;;;;GAKG;AACH,eAAO,MAAM,SAAS,EAAE,IAAI,GAAG,IAEvB,CAAC;AAUT;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,wBAAsB,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,CAWjD;AAED;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBtE;AAED;;GAEG;AACH,wBAAsB,mBAAmB,IAAI,OAAO,CAAC;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC,CAM9E;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,kBAAkB,CACtC,GAAG,EAAE,MAAM,EACX,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,SAAS,GAC/B,OAAO,CAAC,IAAI,CAAC,CAMf;AAED;;;;;;;;GAQG;AACH,wBAAsB,mBAAmB,CAAC,MAAM,GAAE,MAAgB,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,CAK9F;AAED;;;;;;;;;;GAUG;AACH,wBAAsB,oBAAoB,IAAI,OAAO,CAAC,IAAI,CAAC,CAK1D;AAED;;;;;;;;;GASG;AACH,wBAAsB,gBAAgB,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAkBnE;AAED;;GAEG;AACH,wBAAgB,iCAAiC,CAAC,WAAW,CAAC,EAAE,MAAM,QAIrE;AAED;;;;;;;;;GASG;AACH,wBAAgB,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,WAAW,KAAK,IAAI,GAAG,iBAAiB,CAGrF"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.js b/node_modules/expo-updates/build/Updates.js
index 1682bb7..54ae598 100644
--- a/node_modules/expo-updates/build/Updates.js
+++ b/node_modules/expo-updates/build/Updates.js
@@ -1,6 +1,6 @@
-import { RCTDeviceEventEmitter, CodedError, NativeModulesProxy, UnavailabilityError, } from 'expo-modules-core';
-import { EventEmitter } from 'fbemitter';
+import { CodedError, NativeModulesProxy, UnavailabilityError } from 'expo-modules-core';
 import ExpoUpdates from './ExpoUpdates';
+import { getEmitter } from './UpdatesEmitter';
 export * from './Updates.types';
 /**
  * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The
@@ -199,28 +199,6 @@ export async function fetchUpdateAsync() {
 export function clearUpdateCacheExperimentalAsync(_sdkVersion) {
     console.warn("This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!");
 }
-let _emitter;
-function _getEmitter() {
-    if (!_emitter) {
-        _emitter = new EventEmitter();
-        RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);
-    }
-    return _emitter;
-}
-function _emitEvent(params) {
-    let newParams = params;
-    if (typeof params === 'string') {
-        newParams = JSON.parse(params);
-    }
-    if (newParams.manifestString) {
-        newParams.manifest = JSON.parse(newParams.manifestString);
-        delete newParams.manifestString;
-    }
-    if (!_emitter) {
-        throw new Error(`EventEmitter must be initialized to use from its listener`);
-    }
-    _emitter.emit('Expo.updatesEvent', newParams);
-}
 /**
  * Adds a callback to be invoked when updates-related events occur (such as upon the initial app
  * load) due to auto-update settings chosen at build-time. See also the
@@ -232,7 +210,7 @@ function _emitEvent(params) {
  * listener.
  */
 export function addListener(listener) {
-    const emitter = _getEmitter();
+    const emitter = getEmitter();
     return emitter.addListener('Expo.updatesEvent', listener);
 }
 //# sourceMappingURL=Updates.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.js.map.orig b/node_modules/expo-updates/build/Updates.js.map.orig
new file mode 100644
index 0000000..94e728d
--- /dev/null
+++ b/node_modules/expo-updates/build/Updates.js.map.orig
@@ -0,0 +1 @@
+{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n  UpdatesLogEntry,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\n/**\n * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. In development mode, or any other environment in which\n * `expo-updates` is disabled, this value is `null`.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n/**\n * This will be true if the currently running update is the one embedded in the build,\n * and not one downloaded from the updates server.\n */\nexport const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/workflow/expo-go#manifest) object for the update that's currently\n * running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in development mode, and the returned promise will be rejected if you\n * try to do so.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingExpoDevelopmentClient)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Retrieves the most recent expo-updates log entries.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n *\n * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;\n *\n * The promise rejects if there is an unexpected error in retrieving the logs.\n */\nexport async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {\n  if (!ExpoUpdates.readLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');\n  }\n  return await ExpoUpdates.readLogEntriesAsync(maxAge);\n}\n\n/**\n * Clears existing expo-updates log entries.\n *\n * > For now, this operation does nothing on the client.  Once log persistence has been\n * > implemented, this operation will actually remove existing logs.\n *\n * @return A promise that fulfills if the clear operation was successful.\n *\n * The promise rejects if there is an unexpected error in clearing the logs.\n *\n */\nexport async function clearLogEntriesAsync(): Promise<void> {\n  if (!ExpoUpdates.clearLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');\n  }\n  await ExpoUpdates.clearLogEntriesAsync();\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time. See also the\n * [`useUpdateEvents`](#useupdateeventslistener) React hook.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.js.map.rej b/node_modules/expo-updates/build/Updates.js.map.rej
new file mode 100644
index 0000000..23983ec
--- /dev/null
+++ b/node_modules/expo-updates/build/Updates.js.map.rej
@@ -0,0 +1,4 @@
+***************
+*** 1 ****
+- {"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RCTDeviceEventEmitter,\n  CodedError,\n  NativeModulesProxy,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n  UpdatesLogEntry,\n} from './Updates.types';\n\nexport * from './Updates.types';\n\n/**\n * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. In development mode, or any other environment in which\n * `expo-updates` is disabled, this value is `null`.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n/**\n * This will be true if the currently running update is the one embedded in the build,\n * and not one downloaded from the updates server.\n */\nexport const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/workflow/expo-go#manifest) object for the update that's currently\n * running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in development mode, and the returned promise will be rejected if you\n * try to do so.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingExpoDevelopmentClient)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Retrieves the current extra params.\n */\nexport async function getExtraParamsAsync(): Promise<{ [key: string]: string }> {\n  if (!ExpoUpdates.getExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'getExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.getExtraParamsAsync();\n}\n\n/**\n * Sets an extra param if value is non-null, otherwise unsets the param.\n * Extra params are sent in a header of update requests.\n * The update server may use these params when evaluating logic to determine which update to serve.\n * EAS Update merges these params into the fields used to evaluate channel‚Äìbranch mapping logic.\n *\n * @example An app may want to add a feature where users can opt-in to beta updates. In this instance,\n * extra params could be set to `{userType: 'beta'}`, and then the server can use this information\n * when deciding which update to serve. If using EAS Update, the channel-branch mapping can be set to\n * discriminate branches based on the `userType`.\n */\nexport async function setExtraParamAsync(\n  key: string,\n  value: string | null | undefined\n): Promise<void> {\n  if (!ExpoUpdates.setExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'setExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.setExtraParamAsync(key, value ?? null);\n}\n\n/**\n * Retrieves the most recent expo-updates log entries.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n *\n * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;\n *\n * The promise rejects if there is an unexpected error in retrieving the logs.\n */\nexport async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {\n  if (!ExpoUpdates.readLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');\n  }\n  return await ExpoUpdates.readLogEntriesAsync(maxAge);\n}\n\n/**\n * Clears existing expo-updates log entries.\n *\n * > For now, this operation does nothing on the client.  Once log persistence has been\n * > implemented, this operation will actually remove existing logs.\n *\n * @return A promise that fulfills if the clear operation was successful.\n *\n * The promise rejects if there is an unexpected error in clearing the logs.\n *\n */\nexport async function clearLogEntriesAsync(): Promise<void> {\n  if (!ExpoUpdates.clearLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');\n  }\n  await ExpoUpdates.clearLogEntriesAsync();\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time. See also the\n * [`useUpdateEvents`](#useupdateeventslistener) React hook.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"]}--- 1 ----
++ {"version":3,"file":"Updates.js","sourceRoot":"","sources":["../src/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy, UnavailabilityError } from 'expo-modules-core';\nimport { EventSubscription } from 'fbemitter';\n\nimport ExpoUpdates from './ExpoUpdates';\nimport {\n  LocalAssets,\n  Manifest,\n  UpdateCheckResult,\n  UpdateEvent,\n  UpdateFetchResult,\n  UpdatesLogEntry,\n} from './Updates.types';\nimport { getEmitter } from './UpdatesEmitter';\n\nexport * from './Updates.types';\n\n/**\n * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n * will always use lowercase letters. In development mode, or any other environment in which\n * `expo-updates` is disabled, this value is `null`.\n */\nexport const updateId: string | null =\n  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'\n    ? ExpoUpdates.updateId.toLowerCase()\n    : null;\n\n/**\n * The name of the release channel currently configured in this standalone or bare app when using\n * classic updates. When using Expo Updates, the value of this field is always `\"default\"`.\n */\nexport const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';\n\n/**\n * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n */\nexport const channel: string | null = ExpoUpdates.channel ?? null;\n\n/**\n * The runtime version of the current build.\n */\nexport const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};\n\n/**\n * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n * you don't need to worry about backwards compatibility when you put out an update. In very rare\n * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n * can use this constant to provide special behavior for this rare case.\n */\nexport const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;\n\n/**\n * This will be true if the currently running update is the one embedded in the build,\n * and not one downloaded from the updates server.\n */\nexport const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;\n\n// @docsMissing\n/**\n * @hidden\n */\nexport const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;\n\n/**\n * If `expo-updates` is enabled, this is the\n * [manifest](/workflow/expo-go#manifest) object for the update that's currently\n * running.\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n * empty.\n */\nexport const manifest: Partial<Manifest> =\n  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??\n  {};\n\n/**\n * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n *\n * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n * null.\n */\nexport const createdAt: Date | null = ExpoUpdates.commitTime\n  ? new Date(ExpoUpdates.commitTime)\n  : null;\n\nconst isUsingDeveloperTool = !!(manifest as any).developer?.tool;\nconst isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';\nconst manualUpdatesInstructions = isUsingExpoDevelopmentClient\n  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +\n    'version in this development client.'\n  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +\n    '`npm run android --variant Release`.';\n\n/**\n * Instructs the app to reload using the most recently downloaded version. This is useful for\n * triggering a newly downloaded update to launch without the user needing to manually restart the\n * app.\n *\n * It is not recommended to place any meaningful logic after a call to `await\n * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can\n * be reloaded, and immediately before posting an asynchronous task to the main thread to actually\n * reload the app. It is unsafe to make any assumptions about whether any more JS code will be\n * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and\n * the state of the native module and main threads.\n *\n * This method cannot be used in development mode, and the returned promise will be rejected if you\n * try to do so.\n *\n * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or\n * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\n * mode, it most likely means you have installed the module incorrectly. Double check you've\n * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`\n * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on\n * Android ensure you either call `UpdatesController.initialize` with the instance of\n * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the\n * proper instance of `ReactNativeHost`.\n */\nexport async function reloadAsync(): Promise<void> {\n  if (!ExpoUpdates.reload) {\n    throw new UnavailabilityError('Updates', 'reloadAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingExpoDevelopmentClient)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`\n    );\n  }\n  await ExpoUpdates.reload();\n}\n\n/**\n * Checks the server to see if a newly deployed update to your project is available. Does not\n * actually download the update. This method cannot be used in development mode, and the returned\n * promise will be rejected if you try to do so.\n *\n * Checking for an update uses a device's bandwidth and battery life like any network call.\n * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for\n * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\n * updates in a frequent loop.\n *\n * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExpoUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.checkForUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * Retrieves the current extra params.\n */\nexport async function getExtraParamsAsync(): Promise<{ [key: string]: string }> {\n  if (!ExpoUpdates.getExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'getExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.getExtraParamsAsync();\n}\n\n/**\n * Sets an extra param if value is non-null, otherwise unsets the param.\n * Extra params are sent in a header of update requests.\n * The update server may use these params when evaluating logic to determine which update to serve.\n * EAS Update merges these params into the fields used to evaluate channel‚Äìbranch mapping logic.\n *\n * @example An app may want to add a feature where users can opt-in to beta updates. In this instance,\n * extra params could be set to `{userType: 'beta'}`, and then the server can use this information\n * when deciding which update to serve. If using EAS Update, the channel-branch mapping can be set to\n * discriminate branches based on the `userType`.\n */\nexport async function setExtraParamAsync(\n  key: string,\n  value: string | null | undefined\n): Promise<void> {\n  if (!ExpoUpdates.setExtraParamsAsync) {\n    throw new UnavailabilityError('Updates', 'setExtraParamsAsync');\n  }\n\n  return await ExpoUpdates.setExtraParamAsync(key, value ?? null);\n}\n\n/**\n * Retrieves the most recent expo-updates log entries.\n *\n * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).\n *\n * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;\n *\n * The promise rejects if there is an unexpected error in retrieving the logs.\n */\nexport async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {\n  if (!ExpoUpdates.readLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');\n  }\n  return await ExpoUpdates.readLogEntriesAsync(maxAge);\n}\n\n/**\n * Clears existing expo-updates log entries.\n *\n * > For now, this operation does nothing on the client.  Once log persistence has been\n * > implemented, this operation will actually remove existing logs.\n *\n * @return A promise that fulfills if the clear operation was successful.\n *\n * The promise rejects if there is an unexpected error in clearing the logs.\n *\n */\nexport async function clearLogEntriesAsync(): Promise<void> {\n  if (!ExpoUpdates.clearLogEntriesAsync) {\n    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');\n  }\n  await ExpoUpdates.clearLogEntriesAsync();\n}\n\n/**\n * Downloads the most recently deployed update to your project from server to the device's local\n * storage. This method cannot be used in development mode, and the returned promise will be\n * rejected if you try to do so.\n *\n * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.\n *\n * The promise rejects if the app is in development mode, or if there is an unexpected error or\n * timeout communicating with the server.\n */\nexport async function fetchUpdateAsync(): Promise<UpdateFetchResult> {\n  if (!ExpoUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {\n    throw new CodedError(\n      'ERR_UPDATES_DISABLED',\n      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`\n    );\n  }\n\n  const result = await ExpoUpdates.fetchUpdateAsync();\n  if (result.manifestString) {\n    result.manifest = JSON.parse(result.manifestString);\n    delete result.manifestString;\n  }\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {\n  console.warn(\n    \"This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!\"\n  );\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time. See also the\n * [`useUpdateEvents`](#useupdateeventslistener) React hook.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/Updates.js.orig b/node_modules/expo-updates/build/Updates.js.orig
new file mode 100644
index 0000000..1682bb7
--- /dev/null
+++ b/node_modules/expo-updates/build/Updates.js.orig
@@ -0,0 +1,238 @@
+import { RCTDeviceEventEmitter, CodedError, NativeModulesProxy, UnavailabilityError, } from 'expo-modules-core';
+import { EventEmitter } from 'fbemitter';
+import ExpoUpdates from './ExpoUpdates';
+export * from './Updates.types';
+/**
+ * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The
+ * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and
+ * will always use lowercase letters. In development mode, or any other environment in which
+ * `expo-updates` is disabled, this value is `null`.
+ */
+export const updateId = ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'
+    ? ExpoUpdates.updateId.toLowerCase()
+    : null;
+/**
+ * The name of the release channel currently configured in this standalone or bare app when using
+ * classic updates. When using Expo Updates, the value of this field is always `"default"`.
+ */
+export const releaseChannel = ExpoUpdates.releaseChannel ?? 'default';
+/**
+ * The channel name of the current build, if configured for use with EAS Update. Null otherwise.
+ */
+export const channel = ExpoUpdates.channel ?? null;
+/**
+ * The runtime version of the current build.
+ */
+export const runtimeVersion = ExpoUpdates.runtimeVersion ?? null;
+// @docsMissing
+/**
+ * @hidden
+ */
+export const localAssets = ExpoUpdates.localAssets ?? {};
+/**
+ * `expo-updates` does its very best to always launch monotonically newer versions of your app so
+ * you don't need to worry about backwards compatibility when you put out an update. In very rare
+ * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in
+ * the app binary, even after newer updates have been downloaded and run (an "emergency launch").
+ * This boolean will be `true` if the app is launching under this fallback mechanism and `false`
+ * otherwise. If you are concerned about backwards compatibility of future updates to your app, you
+ * can use this constant to provide special behavior for this rare case.
+ */
+export const isEmergencyLaunch = ExpoUpdates.isEmergencyLaunch || false;
+/**
+ * This will be true if the currently running update is the one embedded in the build,
+ * and not one downloaded from the updates server.
+ */
+export const isEmbeddedLaunch = ExpoUpdates.isEmbeddedLaunch || false;
+// @docsMissing
+/**
+ * @hidden
+ */
+export const isUsingEmbeddedAssets = ExpoUpdates.isUsingEmbeddedAssets || false;
+/**
+ * If `expo-updates` is enabled, this is the
+ * [manifest](/workflow/expo-go#manifest) object for the update that's currently
+ * running.
+ *
+ * In development mode, or any other environment in which `expo-updates` is disabled, this object is
+ * empty.
+ */
+export const manifest = (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??
+    {};
+/**
+ * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).
+ *
+ * In development mode, or any other environment in which `expo-updates` is disabled, this value is
+ * null.
+ */
+export const createdAt = ExpoUpdates.commitTime
+    ? new Date(ExpoUpdates.commitTime)
+    : null;
+const isUsingDeveloperTool = !!manifest.developer?.tool;
+const isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';
+const manualUpdatesInstructions = isUsingExpoDevelopmentClient
+    ? 'To test manual updates, publish your project using `expo publish` and open the published ' +
+        'version in this development client.'
+    : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +
+        '`npm run android --variant Release`.';
+/**
+ * Instructs the app to reload using the most recently downloaded version. This is useful for
+ * triggering a newly downloaded update to launch without the user needing to manually restart the
+ * app.
+ *
+ * It is not recommended to place any meaningful logic after a call to `await
+ * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can
+ * be reloaded, and immediately before posting an asynchronous task to the main thread to actually
+ * reload the app. It is unsafe to make any assumptions about whether any more JS code will be
+ * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and
+ * the state of the native module and main threads.
+ *
+ * This method cannot be used in development mode, and the returned promise will be rejected if you
+ * try to do so.
+ *
+ * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or
+ * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production
+ * mode, it most likely means you have installed the module incorrectly. Double check you've
+ * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`
+ * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on
+ * Android ensure you either call `UpdatesController.initialize` with the instance of
+ * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the
+ * proper instance of `ReactNativeHost`.
+ */
+export async function reloadAsync() {
+    if (!ExpoUpdates.reload) {
+        throw new UnavailabilityError('Updates', 'reloadAsync');
+    }
+    if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingExpoDevelopmentClient)) {
+        throw new CodedError('ERR_UPDATES_DISABLED', `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`);
+    }
+    await ExpoUpdates.reload();
+}
+/**
+ * Checks the server to see if a newly deployed update to your project is available. Does not
+ * actually download the update. This method cannot be used in development mode, and the returned
+ * promise will be rejected if you try to do so.
+ *
+ * Checking for an update uses a device's bandwidth and battery life like any network call.
+ * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for
+ * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for
+ * updates in a frequent loop.
+ *
+ * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.
+ *
+ * The promise rejects if the app is in development mode, or if there is an unexpected error or
+ * timeout communicating with the server.
+ */
+export async function checkForUpdateAsync() {
+    if (!ExpoUpdates.checkForUpdateAsync) {
+        throw new UnavailabilityError('Updates', 'checkForUpdateAsync');
+    }
+    if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {
+        throw new CodedError('ERR_UPDATES_DISABLED', `You cannot check for updates in development mode. ${manualUpdatesInstructions}`);
+    }
+    const result = await ExpoUpdates.checkForUpdateAsync();
+    if (result.manifestString) {
+        result.manifest = JSON.parse(result.manifestString);
+        delete result.manifestString;
+    }
+    return result;
+}
+/**
+ * Retrieves the most recent expo-updates log entries.
+ *
+ * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).
+ *
+ * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;
+ *
+ * The promise rejects if there is an unexpected error in retrieving the logs.
+ */
+export async function readLogEntriesAsync(maxAge = 3600000) {
+    if (!ExpoUpdates.readLogEntriesAsync) {
+        throw new UnavailabilityError('Updates', 'readLogEntriesAsync');
+    }
+    return await ExpoUpdates.readLogEntriesAsync(maxAge);
+}
+/**
+ * Clears existing expo-updates log entries.
+ *
+ * > For now, this operation does nothing on the client.  Once log persistence has been
+ * > implemented, this operation will actually remove existing logs.
+ *
+ * @return A promise that fulfills if the clear operation was successful.
+ *
+ * The promise rejects if there is an unexpected error in clearing the logs.
+ *
+ */
+export async function clearLogEntriesAsync() {
+    if (!ExpoUpdates.clearLogEntriesAsync) {
+        throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');
+    }
+    await ExpoUpdates.clearLogEntriesAsync();
+}
+/**
+ * Downloads the most recently deployed update to your project from server to the device's local
+ * storage. This method cannot be used in development mode, and the returned promise will be
+ * rejected if you try to do so.
+ *
+ * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.
+ *
+ * The promise rejects if the app is in development mode, or if there is an unexpected error or
+ * timeout communicating with the server.
+ */
+export async function fetchUpdateAsync() {
+    if (!ExpoUpdates.fetchUpdateAsync) {
+        throw new UnavailabilityError('Updates', 'fetchUpdateAsync');
+    }
+    if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {
+        throw new CodedError('ERR_UPDATES_DISABLED', `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`);
+    }
+    const result = await ExpoUpdates.fetchUpdateAsync();
+    if (result.manifestString) {
+        result.manifest = JSON.parse(result.manifestString);
+        delete result.manifestString;
+    }
+    return result;
+}
+/**
+ * @hidden
+ */
+export function clearUpdateCacheExperimentalAsync(_sdkVersion) {
+    console.warn("This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!");
+}
+let _emitter;
+function _getEmitter() {
+    if (!_emitter) {
+        _emitter = new EventEmitter();
+        RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);
+    }
+    return _emitter;
+}
+function _emitEvent(params) {
+    let newParams = params;
+    if (typeof params === 'string') {
+        newParams = JSON.parse(params);
+    }
+    if (newParams.manifestString) {
+        newParams.manifest = JSON.parse(newParams.manifestString);
+        delete newParams.manifestString;
+    }
+    if (!_emitter) {
+        throw new Error(`EventEmitter must be initialized to use from its listener`);
+    }
+    _emitter.emit('Expo.updatesEvent', newParams);
+}
+/**
+ * Adds a callback to be invoked when updates-related events occur (such as upon the initial app
+ * load) due to auto-update settings chosen at build-time. See also the
+ * [`useUpdateEvents`](#useupdateeventslistener) React hook.
+ *
+ * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance
+ * and should not return any value.
+ * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the
+ * listener.
+ */
+export function addListener(listener) {
+    const emitter = _getEmitter();
+    return emitter.addListener('Expo.updatesEvent', listener);
+}
+//# sourceMappingURL=Updates.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesEmitter.d.ts b/node_modules/expo-updates/build/UpdatesEmitter.d.ts
new file mode 100644
index 0000000..b4a9c52
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesEmitter.d.ts
@@ -0,0 +1,4 @@
+import { EventEmitter } from 'fbemitter';
+export declare function getEmitter(): EventEmitter;
+export declare function emitEvent(params: any): void;
+//# sourceMappingURL=UpdatesEmitter.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesEmitter.d.ts.map b/node_modules/expo-updates/build/UpdatesEmitter.d.ts.map
new file mode 100644
index 0000000..17e5140
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesEmitter.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"UpdatesEmitter.d.ts","sourceRoot":"","sources":["../src/UpdatesEmitter.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAIzC,wBAAgB,UAAU,IAAI,YAAY,CAMzC;AAED,wBAAgB,SAAS,CAAC,MAAM,KAAA,GAAG,IAAI,CActC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesEmitter.js b/node_modules/expo-updates/build/UpdatesEmitter.js
new file mode 100644
index 0000000..a78f688
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesEmitter.js
@@ -0,0 +1,28 @@
+/**
+ * The UpdatesEvent emitter implementation
+ */
+import { DeviceEventEmitter } from 'expo-modules-core';
+import { EventEmitter } from 'fbemitter';
+let _emitter;
+export function getEmitter() {
+    if (!_emitter) {
+        _emitter = new EventEmitter();
+        DeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', emitEvent);
+    }
+    return _emitter;
+}
+export function emitEvent(params) {
+    let newParams = params;
+    if (typeof params === 'string') {
+        newParams = JSON.parse(params);
+    }
+    if (newParams.manifestString) {
+        newParams.manifest = JSON.parse(newParams.manifestString);
+        delete newParams.manifestString;
+    }
+    if (!_emitter) {
+        throw new Error(`EventEmitter must be initialized to use from its listener`);
+    }
+    _emitter.emit('Expo.updatesEvent', newParams);
+}
+//# sourceMappingURL=UpdatesEmitter.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesEmitter.js.map b/node_modules/expo-updates/build/UpdatesEmitter.js.map
new file mode 100644
index 0000000..7f3104b
--- /dev/null
+++ b/node_modules/expo-updates/build/UpdatesEmitter.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"UpdatesEmitter.js","sourceRoot":"","sources":["../src/UpdatesEmitter.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAEzC,IAAI,QAA6B,CAAC;AAElC,MAAM,UAAU,UAAU;IACxB,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC9B,kBAAkB,CAAC,WAAW,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC;KACtE;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,MAAM;IAC9B,IAAI,SAAS,GAAG,MAAM,CAAC;IACvB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAChC;IACD,IAAI,SAAS,CAAC,cAAc,EAAE;QAC5B,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1D,OAAO,SAAS,CAAC,cAAc,CAAC;KACjC;IAED,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAC9E;IACD,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;AAChD,CAAC","sourcesContent":["/**\n * The UpdatesEvent emitter implementation\n */\nimport { DeviceEventEmitter } from 'expo-modules-core';\nimport { EventEmitter } from 'fbemitter';\n\nlet _emitter: EventEmitter | null;\n\nexport function getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', emitEvent);\n  }\n  return _emitter;\n}\n\nexport function emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesHooks.d.ts.map b/node_modules/expo-updates/build/UpdatesHooks.d.ts.map
index 226c8d7..ebb2559 100644
--- a/node_modules/expo-updates/build/UpdatesHooks.d.ts.map
+++ b/node_modules/expo-updates/build/UpdatesHooks.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"UpdatesHooks.d.ts","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,eAAO,MAAM,eAAe,qBAAsB,WAAW,KAAK,IAAI,SAOrE,CAAC"}
\ No newline at end of file
+{"version":3,"file":"UpdatesHooks.d.ts","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,eAAO,MAAM,eAAe,qBAAsB,WAAW,KAAK,IAAI,SAgBrE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesHooks.js b/node_modules/expo-updates/build/UpdatesHooks.js
index 87cf14e..480a995 100644
--- a/node_modules/expo-updates/build/UpdatesHooks.js
+++ b/node_modules/expo-updates/build/UpdatesHooks.js
@@ -1,4 +1,4 @@
-import { useEffect } from 'react';
+import { useEffect, useRef } from 'react';
 import * as Updates from './Updates';
 /**
  * React hook to create an [`UpdateEvent`](#updateevent) listener subscription on mount, using
@@ -25,11 +25,18 @@ import * as Updates from './Updates';
  * ```
  */
 export const useUpdateEvents = (listener) => {
+    const listenerRef = useRef();
     useEffect(() => {
-        const subscription = Updates.addListener(listener);
-        return () => {
-            subscription.remove();
-        };
+        listenerRef.current = listener;
+    }, [listener]);
+    useEffect(() => {
+        if (listenerRef.current) {
+            const subscription = Updates.addListener(listenerRef.current);
+            return () => {
+                subscription.remove();
+            };
+        }
+        return undefined;
     }, []);
 };
 //# sourceMappingURL=UpdatesHooks.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UpdatesHooks.js.map b/node_modules/expo-updates/build/UpdatesHooks.js.map
index 736db50..75f0bf1 100644
--- a/node_modules/expo-updates/build/UpdatesHooks.js.map
+++ b/node_modules/expo-updates/build/UpdatesHooks.js.map
@@ -1 +1 @@
-{"version":3,"file":"UpdatesHooks.js","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAGrC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAAsC,EAAE,EAAE;IACxE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnD,OAAO,GAAG,EAAE;YACV,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { useEffect } from 'react';\n\nimport * as Updates from './Updates';\nimport { UpdateEvent } from './Updates.types';\n\n/**\n * React hook to create an [`UpdateEvent`](#updateevent) listener subscription on mount, using\n * [`addListener`](#updatesaddlistenerlistener). It calls `remove()` on the subscription during unmount.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n *\n * @example\n * ```ts\n * function App() {\n *   const eventListener = (event) => {\n *     if (event.type === Updates.UpdateEventType.ERROR) {\n *       // Handle error\n *     } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n *       // Handle no update available\n *     } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n *       // Handle update available\n *     }\n *   };\n *   Updates.useUpdateEvents(eventListener);\n *   // React Component...\n * }\n * ```\n */\nexport const useUpdateEvents = (listener: (event: UpdateEvent) => void) => {\n  useEffect(() => {\n    const subscription = Updates.addListener(listener);\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"UpdatesHooks.js","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAGrC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAAsC,EAAE,EAAE;IACxE,MAAM,WAAW,GAAG,MAAM,EAAmB,CAAC;IAE9C,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,OAAO,GAAG,QAAQ,CAAC;IACjC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,WAAW,CAAC,OAAO,EAAE;YACvB,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC9D,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,MAAM,EAAE,CAAC;YACxB,CAAC,CAAC;SACH;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport * as Updates from './Updates';\nimport { UpdateEvent } from './Updates.types';\n\n/**\n * React hook to create an [`UpdateEvent`](#updateevent) listener subscription on mount, using\n * [`addListener`](#updatesaddlistenerlistener). It calls `remove()` on the subscription during unmount.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n *\n * @example\n * ```ts\n * function App() {\n *   const eventListener = (event) => {\n *     if (event.type === Updates.UpdateEventType.ERROR) {\n *       // Handle error\n *     } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n *       // Handle no update available\n *     } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n *       // Handle update available\n *     }\n *   };\n *   Updates.useUpdateEvents(eventListener);\n *   // React Component...\n * }\n * ```\n */\nexport const useUpdateEvents = (listener: (event: UpdateEvent) => void) => {\n  const listenerRef = useRef<typeof listener>();\n\n  useEffect(() => {\n    listenerRef.current = listener;\n  }, [listener]);\n\n  useEffect(() => {\n    if (listenerRef.current) {\n      const subscription = Updates.addListener(listenerRef.current);\n      return () => {\n        subscription.remove();\n      };\n    }\n    return undefined;\n  }, []);\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.d.ts b/node_modules/expo-updates/build/UseUpdates.d.ts
new file mode 100644
index 0000000..6c1ad8a
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.d.ts
@@ -0,0 +1,45 @@
+import type { UseUpdatesCallbacksType, UseUpdatesReturnType } from './UseUpdates.types';
+/**
+ * Hook that obtains the Updates info structure and functions.
+ *
+ * @param callbacks Optional set of callbacks that will be called when `checkForUpdate()`, `downloadUpdate()`, `downloadAndRunUpdate()`, or `runUpdate()`, start, complete, or have errors.
+ *
+ * @return the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using this hook, the methods returned should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync), [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync), and [`reloadAsync`](#updatesreloadasync).
+ *
+ * @example
+ * ```jsx UpdatesDemo.tsx
+ * import { StatusBar } from 'expo-status-bar';
+ * import React from 'react';
+ * import { Pressable, Text, View } from 'react-native';
+ * import * as Updates from 'expo-updates';
+ *
+ * export default function UpdatesDemo() {
+ *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = Updates.useUpdates();
+ *
+ *   const { currentlyRunning, availableUpdate } = updatesInfo;
+ *
+ *   // If true, we show the button to download and run the update
+ *   const showDownloadButton = availableUpdate !== undefined;
+ *
+ *   // Show whether or not we are running embedded code or an update
+ *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch
+ *     ? 'This app is running from built-in code'
+ *     : 'This app is running an update';
+ *
+ *   return (
+ *     <View style={styles.container}>
+ *       <Text style={styles.headerText}>Updates Demo</Text>
+ *       <Text>{runTypeMessage}</Text>
+ *       <Button pressHandler={checkForUpdate} text="Check manually for updates" />
+ *       {showDownloadButton ? (
+ *         <Button pressHandler={downloadAndRunUpdate} text="Download and run update" />
+ *       ) : null}
+ *       <StatusBar style="auto" />
+ *     </View>
+ *   );
+ * }
+ *
+ */
+declare const useUpdates: (callbacks?: UseUpdatesCallbacksType) => UseUpdatesReturnType;
+export { useUpdates };
+//# sourceMappingURL=UseUpdates.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.d.ts.map b/node_modules/expo-updates/build/UseUpdates.d.ts.map
new file mode 100644
index 0000000..d431a2a
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdates.d.ts","sourceRoot":"","sources":["../src/UseUpdates.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAEV,uBAAuB,EACvB,oBAAoB,EACrB,MAAM,oBAAoB,CAAC;AAU5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH,QAAA,MAAM,UAAU,EAAE,CAAC,SAAS,CAAC,EAAE,uBAAuB,KAAK,oBA8E1D,CAAC;AAEF,OAAO,EAAE,UAAU,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.js b/node_modules/expo-updates/build/UseUpdates.js
new file mode 100644
index 0000000..6ecc0ae
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.js
@@ -0,0 +1,116 @@
+import { useEffect, useRef, useState } from 'react';
+import * as Updates from './Updates';
+import { useUpdateEvents } from './UpdatesHooks';
+import { checkForUpdateAndReturnAvailableAsync, currentlyRunning, downloadUpdateAsync, downloadAndRunUpdateAsync, runUpdateAsync, updatesInfoFromEvent, } from './UseUpdatesUtils';
+/**
+ * Hook that obtains the Updates info structure and functions.
+ *
+ * @param callbacks Optional set of callbacks that will be called when `checkForUpdate()`, `downloadUpdate()`, `downloadAndRunUpdate()`, or `runUpdate()`, start, complete, or have errors.
+ *
+ * @return the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using this hook, the methods returned should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync), [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync), and [`reloadAsync`](#updatesreloadasync).
+ *
+ * @example
+ * ```jsx UpdatesDemo.tsx
+ * import { StatusBar } from 'expo-status-bar';
+ * import React from 'react';
+ * import { Pressable, Text, View } from 'react-native';
+ * import * as Updates from 'expo-updates';
+ *
+ * export default function UpdatesDemo() {
+ *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = Updates.useUpdates();
+ *
+ *   const { currentlyRunning, availableUpdate } = updatesInfo;
+ *
+ *   // If true, we show the button to download and run the update
+ *   const showDownloadButton = availableUpdate !== undefined;
+ *
+ *   // Show whether or not we are running embedded code or an update
+ *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch
+ *     ? 'This app is running from built-in code'
+ *     : 'This app is running an update';
+ *
+ *   return (
+ *     <View style={styles.container}>
+ *       <Text style={styles.headerText}>Updates Demo</Text>
+ *       <Text>{runTypeMessage}</Text>
+ *       <Button pressHandler={checkForUpdate} text="Check manually for updates" />
+ *       {showDownloadButton ? (
+ *         <Button pressHandler={downloadAndRunUpdate} text="Download and run update" />
+ *       ) : null}
+ *       <StatusBar style="auto" />
+ *     </View>
+ *   );
+ * }
+ *
+ */
+const useUpdates = (callbacks) => {
+    const [updatesInfo, setUpdatesInfo] = useState({
+        currentlyRunning,
+    });
+    const callbacksRef = useRef();
+    useEffect(() => {
+        callbacksRef.current = callbacks;
+    }, [callbacks]);
+    // Set up listener for events from automatic update requests
+    // that happen on startup, and use events to refresh the updates info
+    // context
+    useUpdateEvents((event) => {
+        setUpdatesInfo((updatesInfo) => updatesInfoFromEvent(updatesInfo, event));
+    });
+    const checkForUpdate = () => {
+        checkForUpdateAndReturnAvailableAsync(callbacksRef.current)
+            .then((availableUpdate) => setUpdatesInfo((updatesInfo) => ({
+            ...updatesInfo,
+            lastCheckForUpdateTimeSinceRestart: new Date(),
+            availableUpdate,
+        })))
+            .catch((error) => setUpdatesInfo((updatesInfo) => ({
+            ...updatesInfo,
+            lastCheckForUpdateTimeSinceRestart: new Date(),
+            error,
+        })));
+    };
+    const downloadAndRunUpdate = () => {
+        downloadAndRunUpdateAsync(callbacksRef.current).catch((error) => {
+            setUpdatesInfo((updatesInfo) => ({
+                ...updatesInfo,
+                error,
+            }));
+        });
+    };
+    const downloadUpdate = () => {
+        downloadUpdateAsync(callbacksRef.current).catch((error) => {
+            setUpdatesInfo((updatesInfo) => ({
+                ...updatesInfo,
+                error,
+            }));
+        });
+    };
+    const runUpdate = () => {
+        runUpdateAsync(callbacksRef.current).catch((error) => {
+            setUpdatesInfo((updatesInfo) => ({
+                ...updatesInfo,
+                error,
+            }));
+        });
+    };
+    const readLogEntries = (maxAge = 3600000) => {
+        Updates.readLogEntriesAsync(maxAge)
+            .then((logEntries) => setUpdatesInfo((updatesInfo) => ({
+            ...updatesInfo,
+            logEntries,
+        })))
+            .catch((error) => setUpdatesInfo((updatesInfo) => ({ ...updatesInfo, error })));
+    };
+    // Return the updates info and the user facing functions
+    return {
+        updatesInfo,
+        checkForUpdate,
+        downloadAndRunUpdate,
+        downloadUpdate,
+        runUpdate,
+        readLogEntries,
+    };
+};
+export { useUpdates };
+//# sourceMappingURL=UseUpdates.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.js.map b/node_modules/expo-updates/build/UseUpdates.js.map
new file mode 100644
index 0000000..30aed0a
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdates.js","sourceRoot":"","sources":["../src/UseUpdates.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport { useUpdateEvents } from './UpdatesHooks';\nimport type {\n  UpdatesInfo,\n  UseUpdatesCallbacksType,\n  UseUpdatesReturnType,\n} from './UseUpdates.types';\nimport {\n  checkForUpdateAndReturnAvailableAsync,\n  currentlyRunning,\n  downloadUpdateAsync,\n  downloadAndRunUpdateAsync,\n  runUpdateAsync,\n  updatesInfoFromEvent,\n} from './UseUpdatesUtils';\n\n/**\n * Hook that obtains the Updates info structure and functions.\n *\n * @param callbacks Optional set of callbacks that will be called when `checkForUpdate()`, `downloadUpdate()`, `downloadAndRunUpdate()`, or `runUpdate()`, start, complete, or have errors.\n *\n * @return the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using this hook, the methods returned should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync), [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync), and [`reloadAsync`](#updatesreloadasync).\n *\n * @example\n * ```jsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n * import * as Updates from 'expo-updates';\n *\n * export default function UpdatesDemo() {\n *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = Updates.useUpdates();\n *\n *   const { currentlyRunning, availableUpdate } = updatesInfo;\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = availableUpdate !== undefined;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadAndRunUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n *\n */\nconst useUpdates: (callbacks?: UseUpdatesCallbacksType) => UseUpdatesReturnType = (callbacks) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n  });\n\n  const callbacksRef = useRef<UseUpdatesCallbacksType | undefined>();\n\n  useEffect(() => {\n    callbacksRef.current = callbacks;\n  }, [callbacks]);\n\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo((updatesInfo: UpdatesInfo) => updatesInfoFromEvent(updatesInfo, event));\n  });\n\n  const checkForUpdate = () => {\n    checkForUpdateAndReturnAvailableAsync(callbacksRef.current)\n      .then((availableUpdate) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          lastCheckForUpdateTimeSinceRestart: new Date(),\n          availableUpdate,\n        }))\n      )\n      .catch((error) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          lastCheckForUpdateTimeSinceRestart: new Date(),\n          error,\n        }))\n      );\n  };\n  const downloadAndRunUpdate = () => {\n    downloadAndRunUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const downloadUpdate = () => {\n    downloadUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const runUpdate = () => {\n    runUpdateAsync(callbacksRef.current).catch((error) => {\n      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n        ...updatesInfo,\n        error,\n      }));\n    });\n  };\n  const readLogEntries = (maxAge: number = 3600000) => {\n    Updates.readLogEntriesAsync(maxAge)\n      .then((logEntries) =>\n        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({\n          ...updatesInfo,\n          logEntries,\n        }))\n      )\n      .catch((error) => setUpdatesInfo((updatesInfo: UpdatesInfo) => ({ ...updatesInfo, error })));\n  };\n  // Return the updates info and the user facing functions\n  return {\n    updatesInfo,\n    checkForUpdate,\n    downloadAndRunUpdate,\n    downloadUpdate,\n    runUpdate,\n    readLogEntries,\n  };\n};\n\nexport { useUpdates };\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.types.d.ts b/node_modules/expo-updates/build/UseUpdates.types.d.ts
new file mode 100644
index 0000000..10f3d34
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.types.d.ts
@@ -0,0 +1,152 @@
+import Constants from 'expo-constants';
+import type { UpdatesLogEntry } from './Updates.types';
+export type ClassicManifest = NonNullable<typeof Constants.manifest>;
+export type Manifest = ClassicManifest | NonNullable<typeof Constants.manifest2>;
+/**
+ * Structure encapsulating information on the currently running app
+ * (either the embedded bundle or a downloaded update).
+ */
+export type CurrentlyRunningInfo = {
+    /**
+     * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The
+     * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and
+     * will always use lowercase letters. In development mode, or any other environment in which
+     * `expo-updates` is disabled, this value is `null`.
+     */
+    updateId: string | null;
+    /**
+     * The channel name of the current build, if configured for use with EAS Update. Null otherwise.
+     */
+    channel: string | null;
+    /**
+     * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update
+     * that's currently running (whether it was embedded or downloaded at runtime).
+     *
+     * In development mode, or any other environment in which `expo-updates` is disabled, this value is
+     * null.
+     */
+    createdAt: Date | null;
+    /**
+     * This will be true if the currently running update is the one embedded in the build,
+     * and not one downloaded from the updates server.
+     */
+    isEmbeddedLaunch: boolean;
+    /**
+     * `expo-updates` does its very best to always launch monotonically newer versions of your app so
+     * you don't need to worry about backwards compatibility when you put out an update. In very rare
+     * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in
+     * the app binary, even after newer updates have been downloaded and run (an "emergency launch").
+     * This boolean will be `true` if the app is launching under this fallback mechanism and `false`
+     * otherwise. If you are concerned about backwards compatibility of future updates to your app, you
+     * can use this constant to provide special behavior for this rare case.
+     */
+    isEmergencyLaunch: boolean;
+    /**
+     * If `expo-updates` is enabled, this is the
+     * [manifest](/workflow/expo-go#manifest) object for the update that's currently
+     * running.
+     *
+     * In development mode, or any other environment in which `expo-updates` is disabled, this object is
+     * empty.
+     */
+    manifest: Partial<Manifest> | null;
+    /**
+     * The runtime version of the current build.
+     */
+    runtimeVersion: string | null;
+};
+/**
+ * Structure representing an available update that has been returned by a call to [`checkForUpdate()`](#checkforupdate)
+ * or an [`UpdateEvent`](#updateevent) emitted by native code.
+ */
+export type AvailableUpdateInfo = {
+    /**
+     * A string that uniquely identifies thls update. For the manifests used in the current Expo Updates protocol (including
+     * EAS Update), this represents the update's UUID in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)
+     * and will always use lowercase letters.
+     */
+    updateId: string | null;
+    /**
+     * A `Date` object representing the creation time of this update.
+     */
+    createdAt: Date | null;
+    /**
+     * The manifest for this update.
+     */
+    manifest: Manifest;
+};
+/**
+ * Combined updates info structure provided by [`useUpdates()`](#useupdatescallbacks)
+ */
+export type UpdatesInfo = {
+    /**
+     * Information on the currently running app
+     */
+    currentlyRunning: CurrentlyRunningInfo;
+    /**
+     * If a new available update has been found, either by using checkForUpdate(),
+     * or by the [`UpdateEvent`](#updateevent) listener in [`useUpdates`](#useupdatescallbacks),
+     * this will contain the information for that update.
+     */
+    availableUpdate?: AvailableUpdateInfo;
+    /**
+     * If an error is returned by any of the APIs to check for, download, or launch updates,
+     * the error description will appear here.
+     */
+    error?: Error;
+    /**
+     * A `Date` object representing the last time this client checked for an available update,
+     * or undefined if no check has yet occurred since the app started. Does not persist across
+     * app reloads or restarts.
+     */
+    lastCheckForUpdateTimeSinceRestart?: Date;
+    /**
+     * If present, contains expo-updates log entries returned by the `getLogEntries()` method (see [`useUpdates()`](#useupdatescallbacks).)
+     */
+    logEntries?: UpdatesLogEntry[];
+};
+/**
+ * Callbacks that will be called when methods (`checkForUpdate()`, `downloadUpdate()`,
+ * `downloadAndRunUpdate()`, or `runUpdate()`) start, complete, or have errors.
+ */
+export type UseUpdatesCallbacksType = {
+    onCheckForUpdateStart?: () => void;
+    onCheckForUpdateComplete?: () => void;
+    onCheckForUpdateError?: (error?: Error) => void;
+    onDownloadUpdateStart?: () => void;
+    onDownloadUpdateComplete?: () => void;
+    onDownloadUpdateError?: (error?: Error) => void;
+    onRunUpdateStart?: () => void;
+    onRunUpdateError?: (error?: Error) => void;
+};
+/**
+ * The updates info and methods returned by `useUpdates()`.
+ */
+export type UseUpdatesReturnType = {
+    /**
+     * The information on what is currently running, and on any available update that has already been found.
+     */
+    updatesInfo: UpdatesInfo;
+    /**
+     * Calls `Updates.checkForUpdateAsync()` and uses the passed in setter.
+     */
+    checkForUpdate(): void;
+    /**
+     * Downloads an update, if one is available, using `Updates.fetchUpdateAsync()`.
+     */
+    downloadUpdate(): void;
+    /**
+     * Downloads and runs an update, if one is available.
+     */
+    downloadAndRunUpdate(): void;
+    /**
+     * Runs an update by calling `Updates.reloadAsync()`. This should not be called unless there is an available update
+     * that has already been successfully downloaded using `downloadUpdate()`.
+     */
+    runUpdate(): void;
+    /**
+     * Calls `Updates.readLogEntriesAsync()` and sets the `logEntries` property in the `updatesInfo` structure to the results.
+     */
+    readLogEntries(maxAge?: number): void;
+};
+//# sourceMappingURL=UseUpdates.types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.types.d.ts.map b/node_modules/expo-updates/build/UseUpdates.types.d.ts.map
new file mode 100644
index 0000000..ba3b691
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdates.types.d.ts","sourceRoot":"","sources":["../src/UseUpdates.types.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAEvD,MAAM,MAAM,eAAe,GAAG,WAAW,CAAC,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC;AAErE,MAAM,MAAM,QAAQ,GAAG,eAAe,GAAG,WAAW,CAAC,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC;AAEjF;;;GAGG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC;;;;;OAKG;IACH,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC;IACxB;;OAEG;IACH,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC;IACvB;;;;;;OAMG;IACH,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC;IACvB;;;OAGG;IACH,gBAAgB,EAAE,OAAO,CAAC;IAC1B;;;;;;;;OAQG;IACH,iBAAiB,EAAE,OAAO,CAAC;IAC3B;;;;;;;OAOG;IACH,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACnC;;OAEG;IACH,cAAc,EAAE,MAAM,GAAG,IAAI,CAAC;CAC/B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,mBAAmB,GAAG;IAChC;;;;OAIG;IACH,QAAQ,EAAE,MAAM,GAAG,IAAI,CAAC;IACxB;;OAEG;IACH,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC;IACvB;;OAEG;IACH,QAAQ,EAAE,QAAQ,CAAC;CACpB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,WAAW,GAAG;IACxB;;OAEG;IACH,gBAAgB,EAAE,oBAAoB,CAAC;IACvC;;;;OAIG;IACH,eAAe,CAAC,EAAE,mBAAmB,CAAC;IACtC;;;OAGG;IACH,KAAK,CAAC,EAAE,KAAK,CAAC;IACd;;;;OAIG;IACH,kCAAkC,CAAC,EAAE,IAAI,CAAC;IAC1C;;OAEG;IACH,UAAU,CAAC,EAAE,eAAe,EAAE,CAAC;CAChC,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,uBAAuB,GAAG;IACpC,qBAAqB,CAAC,EAAE,MAAM,IAAI,CAAC;IACnC,wBAAwB,CAAC,EAAE,MAAM,IAAI,CAAC;IACtC,qBAAqB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC;IAChD,qBAAqB,CAAC,EAAE,MAAM,IAAI,CAAC;IACnC,wBAAwB,CAAC,EAAE,MAAM,IAAI,CAAC;IACtC,qBAAqB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC;IAChD,gBAAgB,CAAC,EAAE,MAAM,IAAI,CAAC;IAC9B,gBAAgB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC;CAC5C,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC;;OAEG;IACH,WAAW,EAAE,WAAW,CAAC;IACzB;;OAEG;IACH,cAAc,IAAI,IAAI,CAAC;IACvB;;OAEG;IACH,cAAc,IAAI,IAAI,CAAC;IACvB;;OAEG;IACH,oBAAoB,IAAI,IAAI,CAAC;IAC7B;;;OAGG;IACH,SAAS,IAAI,IAAI,CAAC;IAClB;;OAEG;IACH,cAAc,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;CACvC,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.types.js b/node_modules/expo-updates/build/UseUpdates.types.js
new file mode 100644
index 0000000..14a3ed5
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.types.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=UseUpdates.types.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdates.types.js.map b/node_modules/expo-updates/build/UseUpdates.types.js.map
new file mode 100644
index 0000000..31bd33b
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdates.types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdates.types.js","sourceRoot":"","sources":["../src/UseUpdates.types.ts"],"names":[],"mappings":"","sourcesContent":["import Constants from 'expo-constants';\n\nimport type { UpdatesLogEntry } from './Updates.types';\n\nexport type ClassicManifest = NonNullable<typeof Constants.manifest>;\n\nexport type Manifest = ClassicManifest | NonNullable<typeof Constants.manifest2>;\n\n/**\n * Structure encapsulating information on the currently running app\n * (either the embedded bundle or a downloaded update).\n */\nexport type CurrentlyRunningInfo = {\n  /**\n   * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The\n   * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and\n   * will always use lowercase letters. In development mode, or any other environment in which\n   * `expo-updates` is disabled, this value is `null`.\n   */\n  updateId: string | null;\n  /**\n   * The channel name of the current build, if configured for use with EAS Update. Null otherwise.\n   */\n  channel: string | null;\n  /**\n   * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update\n   * that's currently running (whether it was embedded or downloaded at runtime).\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this value is\n   * null.\n   */\n  createdAt: Date | null;\n  /**\n   * This will be true if the currently running update is the one embedded in the build,\n   * and not one downloaded from the updates server.\n   */\n  isEmbeddedLaunch: boolean;\n  /**\n   * `expo-updates` does its very best to always launch monotonically newer versions of your app so\n   * you don't need to worry about backwards compatibility when you put out an update. In very rare\n   * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in\n   * the app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\n   * This boolean will be `true` if the app is launching under this fallback mechanism and `false`\n   * otherwise. If you are concerned about backwards compatibility of future updates to your app, you\n   * can use this constant to provide special behavior for this rare case.\n   */\n  isEmergencyLaunch: boolean;\n  /**\n   * If `expo-updates` is enabled, this is the\n   * [manifest](/workflow/expo-go#manifest) object for the update that's currently\n   * running.\n   *\n   * In development mode, or any other environment in which `expo-updates` is disabled, this object is\n   * empty.\n   */\n  manifest: Partial<Manifest> | null;\n  /**\n   * The runtime version of the current build.\n   */\n  runtimeVersion: string | null;\n};\n\n/**\n * Structure representing an available update that has been returned by a call to [`checkForUpdate()`](#checkforupdate)\n * or an [`UpdateEvent`](#updateevent) emitted by native code.\n */\nexport type AvailableUpdateInfo = {\n  /**\n   * A string that uniquely identifies thls update. For the manifests used in the current Expo Updates protocol (including\n   * EAS Update), this represents the update's UUID in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)\n   * and will always use lowercase letters.\n   */\n  updateId: string | null;\n  /**\n   * A `Date` object representing the creation time of this update.\n   */\n  createdAt: Date | null;\n  /**\n   * The manifest for this update.\n   */\n  manifest: Manifest;\n};\n\n/**\n * Combined updates info structure provided by [`useUpdates()`](#useupdatescallbacks)\n */\nexport type UpdatesInfo = {\n  /**\n   * Information on the currently running app\n   */\n  currentlyRunning: CurrentlyRunningInfo;\n  /**\n   * If a new available update has been found, either by using checkForUpdate(),\n   * or by the [`UpdateEvent`](#updateevent) listener in [`useUpdates`](#useupdatescallbacks),\n   * this will contain the information for that update.\n   */\n  availableUpdate?: AvailableUpdateInfo;\n  /**\n   * If an error is returned by any of the APIs to check for, download, or launch updates,\n   * the error description will appear here.\n   */\n  error?: Error;\n  /**\n   * A `Date` object representing the last time this client checked for an available update,\n   * or undefined if no check has yet occurred since the app started. Does not persist across\n   * app reloads or restarts.\n   */\n  lastCheckForUpdateTimeSinceRestart?: Date;\n  /**\n   * If present, contains expo-updates log entries returned by the `getLogEntries()` method (see [`useUpdates()`](#useupdatescallbacks).)\n   */\n  logEntries?: UpdatesLogEntry[];\n};\n\n/**\n * Callbacks that will be called when methods (`checkForUpdate()`, `downloadUpdate()`,\n * `downloadAndRunUpdate()`, or `runUpdate()`) start, complete, or have errors.\n */\nexport type UseUpdatesCallbacksType = {\n  onCheckForUpdateStart?: () => void;\n  onCheckForUpdateComplete?: () => void;\n  onCheckForUpdateError?: (error?: Error) => void;\n  onDownloadUpdateStart?: () => void;\n  onDownloadUpdateComplete?: () => void;\n  onDownloadUpdateError?: (error?: Error) => void;\n  onRunUpdateStart?: () => void;\n  onRunUpdateError?: (error?: Error) => void;\n};\n\n/**\n * The updates info and methods returned by `useUpdates()`.\n */\nexport type UseUpdatesReturnType = {\n  /**\n   * The information on what is currently running, and on any available update that has already been found.\n   */\n  updatesInfo: UpdatesInfo;\n  /**\n   * Calls `Updates.checkForUpdateAsync()` and uses the passed in setter.\n   */\n  checkForUpdate(): void;\n  /**\n   * Downloads an update, if one is available, using `Updates.fetchUpdateAsync()`.\n   */\n  downloadUpdate(): void;\n  /**\n   * Downloads and runs an update, if one is available.\n   */\n  downloadAndRunUpdate(): void;\n  /**\n   * Runs an update by calling `Updates.reloadAsync()`. This should not be called unless there is an available update\n   * that has already been successfully downloaded using `downloadUpdate()`.\n   */\n  runUpdate(): void;\n  /**\n   * Calls `Updates.readLogEntriesAsync()` and sets the `logEntries` property in the `updatesInfo` structure to the results.\n   */\n  readLogEntries(maxAge?: number): void;\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdatesUtils.d.ts b/node_modules/expo-updates/build/UseUpdatesUtils.d.ts
new file mode 100644
index 0000000..0f5b917
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdatesUtils.d.ts
@@ -0,0 +1,14 @@
+import type { UpdateEvent } from './Updates.types';
+import type { AvailableUpdateInfo, CurrentlyRunningInfo, Manifest, UpdatesInfo, UseUpdatesCallbacksType } from './UseUpdates.types';
+export declare const currentlyRunning: CurrentlyRunningInfo;
+export declare const availableUpdateFromManifest: (manifest: Manifest | null | undefined) => {
+    updateId: string | null;
+    createdAt: Date | null;
+    manifest: Manifest;
+} | undefined;
+export declare const updatesInfoFromEvent: (updatesInfo: UpdatesInfo | undefined, event: UpdateEvent) => UpdatesInfo;
+export declare const checkForUpdateAndReturnAvailableAsync: (callbacks?: UseUpdatesCallbacksType) => Promise<AvailableUpdateInfo | undefined>;
+export declare const downloadUpdateAsync: (callbacks?: UseUpdatesCallbacksType) => Promise<void>;
+export declare const runUpdateAsync: (callbacks?: UseUpdatesCallbacksType) => Promise<void>;
+export declare const downloadAndRunUpdateAsync: (callbacks?: UseUpdatesCallbacksType) => Promise<void>;
+//# sourceMappingURL=UseUpdatesUtils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdatesUtils.d.ts.map b/node_modules/expo-updates/build/UseUpdatesUtils.d.ts.map
new file mode 100644
index 0000000..40c2da8
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdatesUtils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdatesUtils.d.ts","sourceRoot":"","sources":["../src/UseUpdatesUtils.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,KAAK,EACV,mBAAmB,EACnB,oBAAoB,EACpB,QAAQ,EACR,WAAW,EACX,uBAAuB,EACxB,MAAM,oBAAoB,CAAC;AAG5B,eAAO,MAAM,gBAAgB,EAAE,oBAQ9B,CAAC;AAKF,eAAO,MAAM,2BAA2B,aAAc,QAAQ,GAAG,IAAI,GAAG,SAAS;;;;aAahF,CAAC;AAGF,eAAO,MAAM,oBAAoB,gBAClB,WAAW,GAAG,SAAS,SAC7B,WAAW,KACjB,WA2BF,CAAC;AAGF,eAAO,MAAM,qCAAqC,EAAE,CAClD,SAAS,CAAC,EAAE,uBAAuB,KAChC,OAAO,CAAC,mBAAmB,GAAG,SAAS,CAc3C,CAAC;AAGF,eAAO,MAAM,mBAAmB,eAAsB,uBAAuB,kBAS5E,CAAC;AAGF,eAAO,MAAM,cAAc,eAAsB,uBAAuB,kBAQvE,CAAC;AAGF,eAAO,MAAM,yBAAyB,eAAsB,uBAAuB,kBAGlF,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdatesUtils.js b/node_modules/expo-updates/build/UseUpdatesUtils.js
new file mode 100644
index 0000000..d1be1fe
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdatesUtils.js
@@ -0,0 +1,102 @@
+import * as Updates from './Updates';
+// The currently running info, constructed from Updates constants
+export const currentlyRunning = {
+    updateId: Updates.updateId,
+    channel: Updates.channel,
+    createdAt: Updates.createdAt,
+    isEmbeddedLaunch: Updates.isEmbeddedLaunch,
+    isEmergencyLaunch: Updates.isEmergencyLaunch,
+    manifest: Updates.manifest,
+    runtimeVersion: Updates.runtimeVersion,
+};
+/////// Internal functions ////////
+// Constructs the availableUpdate from the update manifest
+export const availableUpdateFromManifest = (manifest) => {
+    return manifest
+        ? {
+            updateId: manifest?.id ?? null,
+            createdAt: manifest && 'createdAt' in manifest && manifest.createdAt
+                ? new Date(manifest.createdAt)
+                : manifest && 'publishedTime' in manifest && manifest.publishedTime
+                    ? new Date(manifest.publishedTime)
+                    : null,
+            manifest,
+        }
+        : undefined;
+};
+// Constructs the UpdatesInfo from an event
+export const updatesInfoFromEvent = (updatesInfo, event) => {
+    switch (event.type) {
+        case Updates.UpdateEventType.NO_UPDATE_AVAILABLE:
+            return {
+                ...updatesInfo,
+                currentlyRunning,
+                availableUpdate: undefined,
+                error: undefined,
+                lastCheckForUpdateTimeSinceRestart: new Date(),
+            };
+        case Updates.UpdateEventType.UPDATE_AVAILABLE:
+            return {
+                ...updatesInfo,
+                currentlyRunning,
+                availableUpdate: availableUpdateFromManifest(event.manifest),
+                error: undefined,
+                lastCheckForUpdateTimeSinceRestart: new Date(),
+            };
+        case Updates.UpdateEventType.ERROR:
+            return {
+                ...updatesInfo,
+                currentlyRunning,
+                availableUpdate: undefined,
+                error: new Error(event.message),
+                lastCheckForUpdateTimeSinceRestart: new Date(),
+            };
+    }
+};
+// Implementation of checkForUpdate
+export const checkForUpdateAndReturnAvailableAsync = async (callbacks) => {
+    try {
+        callbacks?.onCheckForUpdateStart && callbacks?.onCheckForUpdateStart();
+        const checkResult = await Updates.checkForUpdateAsync();
+        callbacks?.onCheckForUpdateComplete && callbacks?.onCheckForUpdateComplete();
+        if (checkResult.isAvailable) {
+            return availableUpdateFromManifest(checkResult.manifest);
+        }
+        else {
+            return undefined;
+        }
+    }
+    catch (error) {
+        callbacks?.onCheckForUpdateError && callbacks?.onCheckForUpdateError(error);
+        throw error;
+    }
+};
+// Implementation of downloadUpdate
+export const downloadUpdateAsync = async (callbacks) => {
+    try {
+        callbacks?.onDownloadUpdateStart && callbacks?.onDownloadUpdateStart();
+        await Updates.fetchUpdateAsync();
+        callbacks?.onDownloadUpdateComplete && callbacks?.onDownloadUpdateComplete();
+    }
+    catch (error) {
+        callbacks?.onDownloadUpdateError && callbacks?.onDownloadUpdateError(error);
+        throw error;
+    }
+};
+// Implementation of runUpdate
+export const runUpdateAsync = async (callbacks) => {
+    try {
+        callbacks?.onRunUpdateStart && callbacks?.onRunUpdateStart();
+        await Updates.reloadAsync();
+    }
+    catch (error) {
+        callbacks?.onRunUpdateError && callbacks?.onRunUpdateError();
+        throw error;
+    }
+};
+// Implementation of downloadAndRunUpdate
+export const downloadAndRunUpdateAsync = async (callbacks) => {
+    await downloadUpdateAsync(callbacks);
+    await runUpdateAsync(callbacks);
+};
+//# sourceMappingURL=UseUpdatesUtils.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/UseUpdatesUtils.js.map b/node_modules/expo-updates/build/UseUpdatesUtils.js.map
new file mode 100644
index 0000000..82409d8
--- /dev/null
+++ b/node_modules/expo-updates/build/UseUpdatesUtils.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"UseUpdatesUtils.js","sourceRoot":"","sources":["../src/UseUpdatesUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Updates from './Updates';\nimport type { UpdateEvent } from './Updates.types';\nimport type {\n  AvailableUpdateInfo,\n  CurrentlyRunningInfo,\n  Manifest,\n  UpdatesInfo,\n  UseUpdatesCallbacksType,\n} from './UseUpdates.types';\n\n// The currently running info, constructed from Updates constants\nexport const currentlyRunning: CurrentlyRunningInfo = {\n  updateId: Updates.updateId,\n  channel: Updates.channel,\n  createdAt: Updates.createdAt,\n  isEmbeddedLaunch: Updates.isEmbeddedLaunch,\n  isEmergencyLaunch: Updates.isEmergencyLaunch,\n  manifest: Updates.manifest,\n  runtimeVersion: Updates.runtimeVersion,\n};\n\n/////// Internal functions ////////\n\n// Constructs the availableUpdate from the update manifest\nexport const availableUpdateFromManifest = (manifest: Manifest | null | undefined) => {\n  return manifest\n    ? {\n        updateId: manifest?.id ?? null,\n        createdAt:\n          manifest && 'createdAt' in manifest && manifest.createdAt\n            ? new Date(manifest.createdAt)\n            : manifest && 'publishedTime' in manifest && manifest.publishedTime\n            ? new Date(manifest.publishedTime)\n            : null,\n        manifest,\n      }\n    : undefined;\n};\n\n// Constructs the UpdatesInfo from an event\nexport const updatesInfoFromEvent = (\n  updatesInfo: UpdatesInfo | undefined,\n  event: UpdateEvent\n): UpdatesInfo => {\n  switch (event.type) {\n    case Updates.UpdateEventType.NO_UPDATE_AVAILABLE:\n      return {\n        ...updatesInfo,\n        currentlyRunning,\n        availableUpdate: undefined,\n        error: undefined,\n        lastCheckForUpdateTimeSinceRestart: new Date(),\n      };\n    case Updates.UpdateEventType.UPDATE_AVAILABLE:\n      return {\n        ...updatesInfo,\n        currentlyRunning,\n        availableUpdate: availableUpdateFromManifest(event.manifest),\n        error: undefined,\n        lastCheckForUpdateTimeSinceRestart: new Date(),\n      };\n    case Updates.UpdateEventType.ERROR:\n      return {\n        ...updatesInfo,\n        currentlyRunning,\n        availableUpdate: undefined,\n        error: new Error(event.message),\n        lastCheckForUpdateTimeSinceRestart: new Date(),\n      };\n  }\n};\n\n// Implementation of checkForUpdate\nexport const checkForUpdateAndReturnAvailableAsync: (\n  callbacks?: UseUpdatesCallbacksType\n) => Promise<AvailableUpdateInfo | undefined> = async (callbacks) => {\n  try {\n    callbacks?.onCheckForUpdateStart && callbacks?.onCheckForUpdateStart();\n    const checkResult = await Updates.checkForUpdateAsync();\n    callbacks?.onCheckForUpdateComplete && callbacks?.onCheckForUpdateComplete();\n    if (checkResult.isAvailable) {\n      return availableUpdateFromManifest(checkResult.manifest);\n    } else {\n      return undefined;\n    }\n  } catch (error: any) {\n    callbacks?.onCheckForUpdateError && callbacks?.onCheckForUpdateError(error);\n    throw error;\n  }\n};\n\n// Implementation of downloadUpdate\nexport const downloadUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  try {\n    callbacks?.onDownloadUpdateStart && callbacks?.onDownloadUpdateStart();\n    await Updates.fetchUpdateAsync();\n    callbacks?.onDownloadUpdateComplete && callbacks?.onDownloadUpdateComplete();\n  } catch (error: any) {\n    callbacks?.onDownloadUpdateError && callbacks?.onDownloadUpdateError(error);\n    throw error;\n  }\n};\n\n// Implementation of runUpdate\nexport const runUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  try {\n    callbacks?.onRunUpdateStart && callbacks?.onRunUpdateStart();\n    await Updates.reloadAsync();\n  } catch (error: any) {\n    callbacks?.onRunUpdateError && callbacks?.onRunUpdateError();\n    throw error;\n  }\n};\n\n// Implementation of downloadAndRunUpdate\nexport const downloadAndRunUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {\n  await downloadUpdateAsync(callbacks);\n  await runUpdateAsync(callbacks);\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.d.ts b/node_modules/expo-updates/build/index.d.ts
index b67bbd5..8f5d365 100644
--- a/node_modules/expo-updates/build/index.d.ts
+++ b/node_modules/expo-updates/build/index.d.ts
@@ -1,3 +1,5 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export type { UpdatesInfo, UseUpdatesCallbacksType, UseUpdatesReturnType, CurrentlyRunningInfo, AvailableUpdateInfo, } from './UseUpdates.types';
+export * from './UseUpdates';
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.d.ts.map b/node_modules/expo-updates/build/index.d.ts.map
index 314e2ba..568abc0 100644
--- a/node_modules/expo-updates/build/index.d.ts.map
+++ b/node_modules/expo-updates/build/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC;AAC/B,YAAY,EACV,WAAW,EACX,uBAAuB,EACvB,oBAAoB,EACpB,oBAAoB,EACpB,mBAAmB,GACpB,MAAM,oBAAoB,CAAC;AAC5B,cAAc,cAAc,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.js b/node_modules/expo-updates/build/index.js
index 10c0854..5c613f0 100644
--- a/node_modules/expo-updates/build/index.js
+++ b/node_modules/expo-updates/build/index.js
@@ -1,3 +1,4 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export * from './UseUpdates';
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/expo-updates/build/index.js.map b/node_modules/expo-updates/build/index.js.map
index a252c10..d0316bd 100644
--- a/node_modules/expo-updates/build/index.js.map
+++ b/node_modules/expo-updates/build/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC","sourcesContent":["export * from './Updates';\nexport * from './UpdatesHooks';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,WAAW,CAAC;AAC1B,cAAc,gBAAgB,CAAC;AAQ/B,cAAc,cAAc,CAAC","sourcesContent":["export * from './Updates';\nexport * from './UpdatesHooks';\nexport type {\n  UpdatesInfo,\n  UseUpdatesCallbacksType,\n  UseUpdatesReturnType,\n  CurrentlyRunningInfo,\n  AvailableUpdateInfo,\n} from './UseUpdates.types';\nexport * from './UseUpdates';\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-updates/ios/EXUpdates/AppLoader/EXUpdatesAppLoaderTask.m b/node_modules/expo-updates/ios/EXUpdates/AppLoader/EXUpdatesAppLoaderTask.m
index 3c9a535..2ac1933 100644
--- a/node_modules/expo-updates/ios/EXUpdates/AppLoader/EXUpdatesAppLoaderTask.m
+++ b/node_modules/expo-updates/ios/EXUpdates/AppLoader/EXUpdatesAppLoaderTask.m
@@ -83,6 +83,19 @@ static NSString * const EXUpdatesAppLoaderTaskErrorDomain = @"EXUpdatesAppLoader
   return self;
 }
 
+- (NSNumber *)launchWaitMsFromPreference
+{
+  NSString *preferenceValue = [[NSUserDefaults standardUserDefaults] stringForKey:@"EX_UPDATES_LAUNCH_WAIT_MS"];
+  if (preferenceValue == nil) {
+    return nil;
+  }
+  int result = [preferenceValue intValue];
+  if (result >= 0 && result < 5000) {
+    return [NSNumber numberWithInt:result];
+  }
+  return nil;
+}
+
 - (void)start
 {
   if (!_config.isEnabled) {
@@ -125,6 +138,11 @@ static NSString * const EXUpdatesAppLoaderTaskErrorDomain = @"EXUpdatesAppLoader
 
   __block BOOL shouldCheckForUpdate = [EXUpdatesUtils shouldCheckForUpdateWithConfig:_config];
   NSNumber *launchWaitMs = _config.launchWaitMs;
+  NSNumber *launchWaitMsFromPreference = [self launchWaitMsFromPreference];
+  if (launchWaitMsFromPreference != nil) {
+    launchWaitMs = launchWaitMsFromPreference;
+    [self->_logger warn:[NSString stringWithFormat:@"EXUpdatesAppLoaderTask: valid cache timeout preference found. Cache timeout will be %d ms", [launchWaitMsFromPreference intValue]] code:EXUpdatesErrorCodeNone];
+  }
   if ([launchWaitMs isEqualToNumber:@(0)] || !shouldCheckForUpdate) {
     self->_isTimerFinished = YES;
   } else {
diff --git a/node_modules/expo-updates/src/Updates.ts b/node_modules/expo-updates/src/Updates.ts
index 1a439ed..df23281 100644
--- a/node_modules/expo-updates/src/Updates.ts
+++ b/node_modules/expo-updates/src/Updates.ts
@@ -1,10 +1,5 @@
-import {
-  RCTDeviceEventEmitter,
-  CodedError,
-  NativeModulesProxy,
-  UnavailabilityError,
-} from 'expo-modules-core';
-import { EventEmitter, EventSubscription } from 'fbemitter';
+import { CodedError, NativeModulesProxy, UnavailabilityError } from 'expo-modules-core';
+import { EventSubscription } from 'fbemitter';
 
 import ExpoUpdates from './ExpoUpdates';
 import {
@@ -15,6 +10,7 @@ import {
   UpdateFetchResult,
   UpdatesLogEntry,
 } from './Updates.types';
+import { getEmitter } from './UpdatesEmitter';
 
 export * from './Updates.types';
 
@@ -249,32 +245,6 @@ export function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {
   );
 }
 
-let _emitter: EventEmitter | null;
-
-function _getEmitter(): EventEmitter {
-  if (!_emitter) {
-    _emitter = new EventEmitter();
-    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);
-  }
-  return _emitter;
-}
-
-function _emitEvent(params): void {
-  let newParams = params;
-  if (typeof params === 'string') {
-    newParams = JSON.parse(params);
-  }
-  if (newParams.manifestString) {
-    newParams.manifest = JSON.parse(newParams.manifestString);
-    delete newParams.manifestString;
-  }
-
-  if (!_emitter) {
-    throw new Error(`EventEmitter must be initialized to use from its listener`);
-  }
-  _emitter.emit('Expo.updatesEvent', newParams);
-}
-
 /**
  * Adds a callback to be invoked when updates-related events occur (such as upon the initial app
  * load) due to auto-update settings chosen at build-time. See also the
@@ -286,6 +256,6 @@ function _emitEvent(params): void {
  * listener.
  */
 export function addListener(listener: (event: UpdateEvent) => void): EventSubscription {
-  const emitter = _getEmitter();
+  const emitter = getEmitter();
   return emitter.addListener('Expo.updatesEvent', listener);
 }
diff --git a/node_modules/expo-updates/src/Updates.ts.orig b/node_modules/expo-updates/src/Updates.ts.orig
new file mode 100644
index 0000000..1a439ed
--- /dev/null
+++ b/node_modules/expo-updates/src/Updates.ts.orig
@@ -0,0 +1,291 @@
+import {
+  RCTDeviceEventEmitter,
+  CodedError,
+  NativeModulesProxy,
+  UnavailabilityError,
+} from 'expo-modules-core';
+import { EventEmitter, EventSubscription } from 'fbemitter';
+
+import ExpoUpdates from './ExpoUpdates';
+import {
+  LocalAssets,
+  Manifest,
+  UpdateCheckResult,
+  UpdateEvent,
+  UpdateFetchResult,
+  UpdatesLogEntry,
+} from './Updates.types';
+
+export * from './Updates.types';
+
+/**
+ * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The
+ * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and
+ * will always use lowercase letters. In development mode, or any other environment in which
+ * `expo-updates` is disabled, this value is `null`.
+ */
+export const updateId: string | null =
+  ExpoUpdates.updateId && typeof ExpoUpdates.updateId === 'string'
+    ? ExpoUpdates.updateId.toLowerCase()
+    : null;
+
+/**
+ * The name of the release channel currently configured in this standalone or bare app when using
+ * classic updates. When using Expo Updates, the value of this field is always `"default"`.
+ */
+export const releaseChannel: string = ExpoUpdates.releaseChannel ?? 'default';
+
+/**
+ * The channel name of the current build, if configured for use with EAS Update. Null otherwise.
+ */
+export const channel: string | null = ExpoUpdates.channel ?? null;
+
+/**
+ * The runtime version of the current build.
+ */
+export const runtimeVersion: string | null = ExpoUpdates.runtimeVersion ?? null;
+
+// @docsMissing
+/**
+ * @hidden
+ */
+export const localAssets: LocalAssets = ExpoUpdates.localAssets ?? {};
+
+/**
+ * `expo-updates` does its very best to always launch monotonically newer versions of your app so
+ * you don't need to worry about backwards compatibility when you put out an update. In very rare
+ * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in
+ * the app binary, even after newer updates have been downloaded and run (an "emergency launch").
+ * This boolean will be `true` if the app is launching under this fallback mechanism and `false`
+ * otherwise. If you are concerned about backwards compatibility of future updates to your app, you
+ * can use this constant to provide special behavior for this rare case.
+ */
+export const isEmergencyLaunch: boolean = ExpoUpdates.isEmergencyLaunch || false;
+
+/**
+ * This will be true if the currently running update is the one embedded in the build,
+ * and not one downloaded from the updates server.
+ */
+export const isEmbeddedLaunch: boolean = ExpoUpdates.isEmbeddedLaunch || false;
+
+// @docsMissing
+/**
+ * @hidden
+ */
+export const isUsingEmbeddedAssets: boolean = ExpoUpdates.isUsingEmbeddedAssets || false;
+
+/**
+ * If `expo-updates` is enabled, this is the
+ * [manifest](/workflow/expo-go#manifest) object for the update that's currently
+ * running.
+ *
+ * In development mode, or any other environment in which `expo-updates` is disabled, this object is
+ * empty.
+ */
+export const manifest: Partial<Manifest> =
+  (ExpoUpdates.manifestString ? JSON.parse(ExpoUpdates.manifestString) : ExpoUpdates.manifest) ??
+  {};
+
+/**
+ * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).
+ *
+ * In development mode, or any other environment in which `expo-updates` is disabled, this value is
+ * null.
+ */
+export const createdAt: Date | null = ExpoUpdates.commitTime
+  ? new Date(ExpoUpdates.commitTime)
+  : null;
+
+const isUsingDeveloperTool = !!(manifest as any).developer?.tool;
+const isUsingExpoDevelopmentClient = NativeModulesProxy.ExponentConstants?.appOwnership === 'expo';
+const manualUpdatesInstructions = isUsingExpoDevelopmentClient
+  ? 'To test manual updates, publish your project using `expo publish` and open the published ' +
+    'version in this development client.'
+  : 'To test manual updates, make a release build with `npm run ios --configuration Release` or ' +
+    '`npm run android --variant Release`.';
+
+/**
+ * Instructs the app to reload using the most recently downloaded version. This is useful for
+ * triggering a newly downloaded update to launch without the user needing to manually restart the
+ * app.
+ *
+ * It is not recommended to place any meaningful logic after a call to `await
+ * Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can
+ * be reloaded, and immediately before posting an asynchronous task to the main thread to actually
+ * reload the app. It is unsafe to make any assumptions about whether any more JS code will be
+ * executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and
+ * the state of the native module and main threads.
+ *
+ * This method cannot be used in development mode, and the returned promise will be rejected if you
+ * try to do so.
+ *
+ * @return A promise that fulfills right before the reload instruction is sent to the JS runtime, or
+ * rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production
+ * mode, it most likely means you have installed the module incorrectly. Double check you've
+ * followed the installation instructions. In particular, on iOS ensure that you set the `bridge`
+ * property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on
+ * Android ensure you either call `UpdatesController.initialize` with the instance of
+ * `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the
+ * proper instance of `ReactNativeHost`.
+ */
+export async function reloadAsync(): Promise<void> {
+  if (!ExpoUpdates.reload) {
+    throw new UnavailabilityError('Updates', 'reloadAsync');
+  }
+  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingExpoDevelopmentClient)) {
+    throw new CodedError(
+      'ERR_UPDATES_DISABLED',
+      `You cannot use the Updates module in development mode in a production app. ${manualUpdatesInstructions}`
+    );
+  }
+  await ExpoUpdates.reload();
+}
+
+/**
+ * Checks the server to see if a newly deployed update to your project is available. Does not
+ * actually download the update. This method cannot be used in development mode, and the returned
+ * promise will be rejected if you try to do so.
+ *
+ * Checking for an update uses a device's bandwidth and battery life like any network call.
+ * Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for
+ * updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for
+ * updates in a frequent loop.
+ *
+ * @return A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.
+ *
+ * The promise rejects if the app is in development mode, or if there is an unexpected error or
+ * timeout communicating with the server.
+ */
+export async function checkForUpdateAsync(): Promise<UpdateCheckResult> {
+  if (!ExpoUpdates.checkForUpdateAsync) {
+    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');
+  }
+  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {
+    throw new CodedError(
+      'ERR_UPDATES_DISABLED',
+      `You cannot check for updates in development mode. ${manualUpdatesInstructions}`
+    );
+  }
+
+  const result = await ExpoUpdates.checkForUpdateAsync();
+  if (result.manifestString) {
+    result.manifest = JSON.parse(result.manifestString);
+    delete result.manifestString;
+  }
+
+  return result;
+}
+
+/**
+ * Retrieves the most recent expo-updates log entries.
+ *
+ * @param maxAge Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour).
+ *
+ * @return A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;
+ *
+ * The promise rejects if there is an unexpected error in retrieving the logs.
+ */
+export async function readLogEntriesAsync(maxAge: number = 3600000): Promise<UpdatesLogEntry[]> {
+  if (!ExpoUpdates.readLogEntriesAsync) {
+    throw new UnavailabilityError('Updates', 'readLogEntriesAsync');
+  }
+  return await ExpoUpdates.readLogEntriesAsync(maxAge);
+}
+
+/**
+ * Clears existing expo-updates log entries.
+ *
+ * > For now, this operation does nothing on the client.  Once log persistence has been
+ * > implemented, this operation will actually remove existing logs.
+ *
+ * @return A promise that fulfills if the clear operation was successful.
+ *
+ * The promise rejects if there is an unexpected error in clearing the logs.
+ *
+ */
+export async function clearLogEntriesAsync(): Promise<void> {
+  if (!ExpoUpdates.clearLogEntriesAsync) {
+    throw new UnavailabilityError('Updates', 'clearLogEntriesAsync');
+  }
+  await ExpoUpdates.clearLogEntriesAsync();
+}
+
+/**
+ * Downloads the most recently deployed update to your project from server to the device's local
+ * storage. This method cannot be used in development mode, and the returned promise will be
+ * rejected if you try to do so.
+ *
+ * @return A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.
+ *
+ * The promise rejects if the app is in development mode, or if there is an unexpected error or
+ * timeout communicating with the server.
+ */
+export async function fetchUpdateAsync(): Promise<UpdateFetchResult> {
+  if (!ExpoUpdates.fetchUpdateAsync) {
+    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');
+  }
+  if (!ExpoUpdates?.nativeDebug && (__DEV__ || isUsingDeveloperTool)) {
+    throw new CodedError(
+      'ERR_UPDATES_DISABLED',
+      `You cannot fetch updates in development mode. ${manualUpdatesInstructions}`
+    );
+  }
+
+  const result = await ExpoUpdates.fetchUpdateAsync();
+  if (result.manifestString) {
+    result.manifest = JSON.parse(result.manifestString);
+    delete result.manifestString;
+  }
+
+  return result;
+}
+
+/**
+ * @hidden
+ */
+export function clearUpdateCacheExperimentalAsync(_sdkVersion?: string) {
+  console.warn(
+    "This method is no longer necessary. `expo-updates` now automatically deletes your app's old bundle files!"
+  );
+}
+
+let _emitter: EventEmitter | null;
+
+function _getEmitter(): EventEmitter {
+  if (!_emitter) {
+    _emitter = new EventEmitter();
+    RCTDeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);
+  }
+  return _emitter;
+}
+
+function _emitEvent(params): void {
+  let newParams = params;
+  if (typeof params === 'string') {
+    newParams = JSON.parse(params);
+  }
+  if (newParams.manifestString) {
+    newParams.manifest = JSON.parse(newParams.manifestString);
+    delete newParams.manifestString;
+  }
+
+  if (!_emitter) {
+    throw new Error(`EventEmitter must be initialized to use from its listener`);
+  }
+  _emitter.emit('Expo.updatesEvent', newParams);
+}
+
+/**
+ * Adds a callback to be invoked when updates-related events occur (such as upon the initial app
+ * load) due to auto-update settings chosen at build-time. See also the
+ * [`useUpdateEvents`](#useupdateeventslistener) React hook.
+ *
+ * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance
+ * and should not return any value.
+ * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the
+ * listener.
+ */
+export function addListener(listener: (event: UpdateEvent) => void): EventSubscription {
+  const emitter = _getEmitter();
+  return emitter.addListener('Expo.updatesEvent', listener);
+}
diff --git a/node_modules/expo-updates/src/UpdatesEmitter.ts b/node_modules/expo-updates/src/UpdatesEmitter.ts
new file mode 100644
index 0000000..bc73d65
--- /dev/null
+++ b/node_modules/expo-updates/src/UpdatesEmitter.ts
@@ -0,0 +1,31 @@
+/**
+ * The UpdatesEvent emitter implementation
+ */
+import { DeviceEventEmitter } from 'expo-modules-core';
+import { EventEmitter } from 'fbemitter';
+
+let _emitter: EventEmitter | null;
+
+export function getEmitter(): EventEmitter {
+  if (!_emitter) {
+    _emitter = new EventEmitter();
+    DeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', emitEvent);
+  }
+  return _emitter;
+}
+
+export function emitEvent(params): void {
+  let newParams = params;
+  if (typeof params === 'string') {
+    newParams = JSON.parse(params);
+  }
+  if (newParams.manifestString) {
+    newParams.manifest = JSON.parse(newParams.manifestString);
+    delete newParams.manifestString;
+  }
+
+  if (!_emitter) {
+    throw new Error(`EventEmitter must be initialized to use from its listener`);
+  }
+  _emitter.emit('Expo.updatesEvent', newParams);
+}
diff --git a/node_modules/expo-updates/src/UpdatesHooks.ts b/node_modules/expo-updates/src/UpdatesHooks.ts
index 52b5982..0e2fd64 100644
--- a/node_modules/expo-updates/src/UpdatesHooks.ts
+++ b/node_modules/expo-updates/src/UpdatesHooks.ts
@@ -1,4 +1,4 @@
-import { useEffect } from 'react';
+import { useEffect, useRef } from 'react';
 
 import * as Updates from './Updates';
 import { UpdateEvent } from './Updates.types';
@@ -28,10 +28,19 @@ import { UpdateEvent } from './Updates.types';
  * ```
  */
 export const useUpdateEvents = (listener: (event: UpdateEvent) => void) => {
+  const listenerRef = useRef<typeof listener>();
+
+  useEffect(() => {
+    listenerRef.current = listener;
+  }, [listener]);
+
   useEffect(() => {
-    const subscription = Updates.addListener(listener);
-    return () => {
-      subscription.remove();
-    };
+    if (listenerRef.current) {
+      const subscription = Updates.addListener(listenerRef.current);
+      return () => {
+        subscription.remove();
+      };
+    }
+    return undefined;
   }, []);
 };
diff --git a/node_modules/expo-updates/src/UseUpdates.ts b/node_modules/expo-updates/src/UseUpdates.ts
new file mode 100644
index 0000000..259a829
--- /dev/null
+++ b/node_modules/expo-updates/src/UseUpdates.ts
@@ -0,0 +1,140 @@
+import { useEffect, useRef, useState } from 'react';
+
+import * as Updates from './Updates';
+import { useUpdateEvents } from './UpdatesHooks';
+import type {
+  UpdatesInfo,
+  UseUpdatesCallbacksType,
+  UseUpdatesReturnType,
+} from './UseUpdates.types';
+import {
+  checkForUpdateAndReturnAvailableAsync,
+  currentlyRunning,
+  downloadUpdateAsync,
+  downloadAndRunUpdateAsync,
+  runUpdateAsync,
+  updatesInfoFromEvent,
+} from './UseUpdatesUtils';
+
+/**
+ * Hook that obtains the Updates info structure and functions.
+ *
+ * @param callbacks Optional set of callbacks that will be called when `checkForUpdate()`, `downloadUpdate()`, `downloadAndRunUpdate()`, or `runUpdate()`, start, complete, or have errors.
+ *
+ * @return the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using this hook, the methods returned should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync), [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync), and [`reloadAsync`](#updatesreloadasync).
+ *
+ * @example
+ * ```jsx UpdatesDemo.tsx
+ * import { StatusBar } from 'expo-status-bar';
+ * import React from 'react';
+ * import { Pressable, Text, View } from 'react-native';
+ * import * as Updates from 'expo-updates';
+ *
+ * export default function UpdatesDemo() {
+ *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = Updates.useUpdates();
+ *
+ *   const { currentlyRunning, availableUpdate } = updatesInfo;
+ *
+ *   // If true, we show the button to download and run the update
+ *   const showDownloadButton = availableUpdate !== undefined;
+ *
+ *   // Show whether or not we are running embedded code or an update
+ *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch
+ *     ? 'This app is running from built-in code'
+ *     : 'This app is running an update';
+ *
+ *   return (
+ *     <View style={styles.container}>
+ *       <Text style={styles.headerText}>Updates Demo</Text>
+ *       <Text>{runTypeMessage}</Text>
+ *       <Button pressHandler={checkForUpdate} text="Check manually for updates" />
+ *       {showDownloadButton ? (
+ *         <Button pressHandler={downloadAndRunUpdate} text="Download and run update" />
+ *       ) : null}
+ *       <StatusBar style="auto" />
+ *     </View>
+ *   );
+ * }
+ *
+ */
+const useUpdates: (callbacks?: UseUpdatesCallbacksType) => UseUpdatesReturnType = (callbacks) => {
+  const [updatesInfo, setUpdatesInfo] = useState({
+    currentlyRunning,
+  });
+
+  const callbacksRef = useRef<UseUpdatesCallbacksType | undefined>();
+
+  useEffect(() => {
+    callbacksRef.current = callbacks;
+  }, [callbacks]);
+
+  // Set up listener for events from automatic update requests
+  // that happen on startup, and use events to refresh the updates info
+  // context
+  useUpdateEvents((event) => {
+    setUpdatesInfo((updatesInfo: UpdatesInfo) => updatesInfoFromEvent(updatesInfo, event));
+  });
+
+  const checkForUpdate = () => {
+    checkForUpdateAndReturnAvailableAsync(callbacksRef.current)
+      .then((availableUpdate) =>
+        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+          ...updatesInfo,
+          lastCheckForUpdateTimeSinceRestart: new Date(),
+          availableUpdate,
+        }))
+      )
+      .catch((error) =>
+        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+          ...updatesInfo,
+          lastCheckForUpdateTimeSinceRestart: new Date(),
+          error,
+        }))
+      );
+  };
+  const downloadAndRunUpdate = () => {
+    downloadAndRunUpdateAsync(callbacksRef.current).catch((error) => {
+      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+        ...updatesInfo,
+        error,
+      }));
+    });
+  };
+  const downloadUpdate = () => {
+    downloadUpdateAsync(callbacksRef.current).catch((error) => {
+      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+        ...updatesInfo,
+        error,
+      }));
+    });
+  };
+  const runUpdate = () => {
+    runUpdateAsync(callbacksRef.current).catch((error) => {
+      setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+        ...updatesInfo,
+        error,
+      }));
+    });
+  };
+  const readLogEntries = (maxAge: number = 3600000) => {
+    Updates.readLogEntriesAsync(maxAge)
+      .then((logEntries) =>
+        setUpdatesInfo((updatesInfo: UpdatesInfo) => ({
+          ...updatesInfo,
+          logEntries,
+        }))
+      )
+      .catch((error) => setUpdatesInfo((updatesInfo: UpdatesInfo) => ({ ...updatesInfo, error })));
+  };
+  // Return the updates info and the user facing functions
+  return {
+    updatesInfo,
+    checkForUpdate,
+    downloadAndRunUpdate,
+    downloadUpdate,
+    runUpdate,
+    readLogEntries,
+  };
+};
+
+export { useUpdates };
diff --git a/node_modules/expo-updates/src/UseUpdates.types.ts b/node_modules/expo-updates/src/UseUpdates.types.ts
new file mode 100644
index 0000000..6ceb85b
--- /dev/null
+++ b/node_modules/expo-updates/src/UseUpdates.types.ts
@@ -0,0 +1,159 @@
+import Constants from 'expo-constants';
+
+import type { UpdatesLogEntry } from './Updates.types';
+
+export type ClassicManifest = NonNullable<typeof Constants.manifest>;
+
+export type Manifest = ClassicManifest | NonNullable<typeof Constants.manifest2>;
+
+/**
+ * Structure encapsulating information on the currently running app
+ * (either the embedded bundle or a downloaded update).
+ */
+export type CurrentlyRunningInfo = {
+  /**
+   * The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The
+   * UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and
+   * will always use lowercase letters. In development mode, or any other environment in which
+   * `expo-updates` is disabled, this value is `null`.
+   */
+  updateId: string | null;
+  /**
+   * The channel name of the current build, if configured for use with EAS Update. Null otherwise.
+   */
+  channel: string | null;
+  /**
+   * If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update
+   * that's currently running (whether it was embedded or downloaded at runtime).
+   *
+   * In development mode, or any other environment in which `expo-updates` is disabled, this value is
+   * null.
+   */
+  createdAt: Date | null;
+  /**
+   * This will be true if the currently running update is the one embedded in the build,
+   * and not one downloaded from the updates server.
+   */
+  isEmbeddedLaunch: boolean;
+  /**
+   * `expo-updates` does its very best to always launch monotonically newer versions of your app so
+   * you don't need to worry about backwards compatibility when you put out an update. In very rare
+   * cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in
+   * the app binary, even after newer updates have been downloaded and run (an "emergency launch").
+   * This boolean will be `true` if the app is launching under this fallback mechanism and `false`
+   * otherwise. If you are concerned about backwards compatibility of future updates to your app, you
+   * can use this constant to provide special behavior for this rare case.
+   */
+  isEmergencyLaunch: boolean;
+  /**
+   * If `expo-updates` is enabled, this is the
+   * [manifest](/workflow/expo-go#manifest) object for the update that's currently
+   * running.
+   *
+   * In development mode, or any other environment in which `expo-updates` is disabled, this object is
+   * empty.
+   */
+  manifest: Partial<Manifest> | null;
+  /**
+   * The runtime version of the current build.
+   */
+  runtimeVersion: string | null;
+};
+
+/**
+ * Structure representing an available update that has been returned by a call to [`checkForUpdate()`](#checkforupdate)
+ * or an [`UpdateEvent`](#updateevent) emitted by native code.
+ */
+export type AvailableUpdateInfo = {
+  /**
+   * A string that uniquely identifies thls update. For the manifests used in the current Expo Updates protocol (including
+   * EAS Update), this represents the update's UUID in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)
+   * and will always use lowercase letters.
+   */
+  updateId: string | null;
+  /**
+   * A `Date` object representing the creation time of this update.
+   */
+  createdAt: Date | null;
+  /**
+   * The manifest for this update.
+   */
+  manifest: Manifest;
+};
+
+/**
+ * Combined updates info structure provided by [`useUpdates()`](#useupdatescallbacks)
+ */
+export type UpdatesInfo = {
+  /**
+   * Information on the currently running app
+   */
+  currentlyRunning: CurrentlyRunningInfo;
+  /**
+   * If a new available update has been found, either by using checkForUpdate(),
+   * or by the [`UpdateEvent`](#updateevent) listener in [`useUpdates`](#useupdatescallbacks),
+   * this will contain the information for that update.
+   */
+  availableUpdate?: AvailableUpdateInfo;
+  /**
+   * If an error is returned by any of the APIs to check for, download, or launch updates,
+   * the error description will appear here.
+   */
+  error?: Error;
+  /**
+   * A `Date` object representing the last time this client checked for an available update,
+   * or undefined if no check has yet occurred since the app started. Does not persist across
+   * app reloads or restarts.
+   */
+  lastCheckForUpdateTimeSinceRestart?: Date;
+  /**
+   * If present, contains expo-updates log entries returned by the `getLogEntries()` method (see [`useUpdates()`](#useupdatescallbacks).)
+   */
+  logEntries?: UpdatesLogEntry[];
+};
+
+/**
+ * Callbacks that will be called when methods (`checkForUpdate()`, `downloadUpdate()`,
+ * `downloadAndRunUpdate()`, or `runUpdate()`) start, complete, or have errors.
+ */
+export type UseUpdatesCallbacksType = {
+  onCheckForUpdateStart?: () => void;
+  onCheckForUpdateComplete?: () => void;
+  onCheckForUpdateError?: (error?: Error) => void;
+  onDownloadUpdateStart?: () => void;
+  onDownloadUpdateComplete?: () => void;
+  onDownloadUpdateError?: (error?: Error) => void;
+  onRunUpdateStart?: () => void;
+  onRunUpdateError?: (error?: Error) => void;
+};
+
+/**
+ * The updates info and methods returned by `useUpdates()`.
+ */
+export type UseUpdatesReturnType = {
+  /**
+   * The information on what is currently running, and on any available update that has already been found.
+   */
+  updatesInfo: UpdatesInfo;
+  /**
+   * Calls `Updates.checkForUpdateAsync()` and uses the passed in setter.
+   */
+  checkForUpdate(): void;
+  /**
+   * Downloads an update, if one is available, using `Updates.fetchUpdateAsync()`.
+   */
+  downloadUpdate(): void;
+  /**
+   * Downloads and runs an update, if one is available.
+   */
+  downloadAndRunUpdate(): void;
+  /**
+   * Runs an update by calling `Updates.reloadAsync()`. This should not be called unless there is an available update
+   * that has already been successfully downloaded using `downloadUpdate()`.
+   */
+  runUpdate(): void;
+  /**
+   * Calls `Updates.readLogEntriesAsync()` and sets the `logEntries` property in the `updatesInfo` structure to the results.
+   */
+  readLogEntries(maxAge?: number): void;
+};
diff --git a/node_modules/expo-updates/src/UseUpdatesUtils.ts b/node_modules/expo-updates/src/UseUpdatesUtils.ts
new file mode 100644
index 0000000..698c725
--- /dev/null
+++ b/node_modules/expo-updates/src/UseUpdatesUtils.ts
@@ -0,0 +1,119 @@
+import * as Updates from './Updates';
+import type { UpdateEvent } from './Updates.types';
+import type {
+  AvailableUpdateInfo,
+  CurrentlyRunningInfo,
+  Manifest,
+  UpdatesInfo,
+  UseUpdatesCallbacksType,
+} from './UseUpdates.types';
+
+// The currently running info, constructed from Updates constants
+export const currentlyRunning: CurrentlyRunningInfo = {
+  updateId: Updates.updateId,
+  channel: Updates.channel,
+  createdAt: Updates.createdAt,
+  isEmbeddedLaunch: Updates.isEmbeddedLaunch,
+  isEmergencyLaunch: Updates.isEmergencyLaunch,
+  manifest: Updates.manifest,
+  runtimeVersion: Updates.runtimeVersion,
+};
+
+/////// Internal functions ////////
+
+// Constructs the availableUpdate from the update manifest
+export const availableUpdateFromManifest = (manifest: Manifest | null | undefined) => {
+  return manifest
+    ? {
+        updateId: manifest?.id ?? null,
+        createdAt:
+          manifest && 'createdAt' in manifest && manifest.createdAt
+            ? new Date(manifest.createdAt)
+            : manifest && 'publishedTime' in manifest && manifest.publishedTime
+            ? new Date(manifest.publishedTime)
+            : null,
+        manifest,
+      }
+    : undefined;
+};
+
+// Constructs the UpdatesInfo from an event
+export const updatesInfoFromEvent = (
+  updatesInfo: UpdatesInfo | undefined,
+  event: UpdateEvent
+): UpdatesInfo => {
+  switch (event.type) {
+    case Updates.UpdateEventType.NO_UPDATE_AVAILABLE:
+      return {
+        ...updatesInfo,
+        currentlyRunning,
+        availableUpdate: undefined,
+        error: undefined,
+        lastCheckForUpdateTimeSinceRestart: new Date(),
+      };
+    case Updates.UpdateEventType.UPDATE_AVAILABLE:
+      return {
+        ...updatesInfo,
+        currentlyRunning,
+        availableUpdate: availableUpdateFromManifest(event.manifest),
+        error: undefined,
+        lastCheckForUpdateTimeSinceRestart: new Date(),
+      };
+    case Updates.UpdateEventType.ERROR:
+      return {
+        ...updatesInfo,
+        currentlyRunning,
+        availableUpdate: undefined,
+        error: new Error(event.message),
+        lastCheckForUpdateTimeSinceRestart: new Date(),
+      };
+  }
+};
+
+// Implementation of checkForUpdate
+export const checkForUpdateAndReturnAvailableAsync: (
+  callbacks?: UseUpdatesCallbacksType
+) => Promise<AvailableUpdateInfo | undefined> = async (callbacks) => {
+  try {
+    callbacks?.onCheckForUpdateStart && callbacks?.onCheckForUpdateStart();
+    const checkResult = await Updates.checkForUpdateAsync();
+    callbacks?.onCheckForUpdateComplete && callbacks?.onCheckForUpdateComplete();
+    if (checkResult.isAvailable) {
+      return availableUpdateFromManifest(checkResult.manifest);
+    } else {
+      return undefined;
+    }
+  } catch (error: any) {
+    callbacks?.onCheckForUpdateError && callbacks?.onCheckForUpdateError(error);
+    throw error;
+  }
+};
+
+// Implementation of downloadUpdate
+export const downloadUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {
+  try {
+    callbacks?.onDownloadUpdateStart && callbacks?.onDownloadUpdateStart();
+    await Updates.fetchUpdateAsync();
+    callbacks?.onDownloadUpdateComplete && callbacks?.onDownloadUpdateComplete();
+  } catch (error: any) {
+    callbacks?.onDownloadUpdateError && callbacks?.onDownloadUpdateError(error);
+    throw error;
+  }
+};
+
+// Implementation of runUpdate
+export const runUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {
+  try {
+    callbacks?.onRunUpdateStart && callbacks?.onRunUpdateStart();
+    await Updates.reloadAsync();
+  } catch (error: any) {
+    callbacks?.onRunUpdateError && callbacks?.onRunUpdateError();
+    throw error;
+  }
+};
+
+// Implementation of downloadAndRunUpdate
+export const downloadAndRunUpdateAsync = async (callbacks?: UseUpdatesCallbacksType) => {
+  await downloadUpdateAsync(callbacks);
+  await runUpdateAsync(callbacks);
+};
diff --git a/node_modules/expo-updates/src/__tests__/UseUpdates-test.ios.tsx b/node_modules/expo-updates/src/__tests__/UseUpdates-test.ios.tsx
new file mode 100644
index 0000000..7bddeb6
--- /dev/null
+++ b/node_modules/expo-updates/src/__tests__/UseUpdates-test.ios.tsx
@@ -0,0 +1,288 @@
+import { act, fireEvent, render, screen } from '@testing-library/react-native';
+import '@testing-library/jest-native/extend-expect';
+import React from 'react';
+
+import * as Updates from '..';
+import type { Manifest, UpdateEvent, UseUpdatesCallbacksType } from '..';
+import ExpoUpdates from '../ExpoUpdates';
+import { emitEvent } from '../UpdatesEmitter';
+import { availableUpdateFromManifest, updatesInfoFromEvent } from '../UseUpdatesUtils';
+import UseUpdatesTestApp from './UseUpdatesTestApp';
+
+const { UpdatesLogEntryCode, UpdatesLogEntryLevel, UpdateEventType } = Updates;
+
+const getCallbacks: () => UseUpdatesCallbacksType = () => {
+  return {
+    onCheckForUpdateComplete: jest.fn(),
+    onCheckForUpdateError: jest.fn(),
+    onCheckForUpdateStart: jest.fn(),
+    onDownloadUpdateComplete: jest.fn(),
+    onDownloadUpdateError: jest.fn(),
+    onDownloadUpdateStart: jest.fn(),
+    onRunUpdateError: jest.fn(),
+    onRunUpdateStart: jest.fn(),
+  };
+};
+
+jest.mock('../ExpoUpdates', () => {
+  return {
+    nativeDebug: true,
+    channel: 'main',
+    updateId: '0000-1111',
+    commitTime: '2023-03-26T04:58:02.560Z',
+    checkForUpdateAsync: jest.fn(),
+    fetchUpdateAsync: jest.fn(),
+    reload: jest.fn(),
+    readLogEntriesAsync: jest.fn(),
+  };
+});
+
+describe('useUpdates()', () => {
+  describe('Component tests', () => {
+    it('Shows currently running info', async () => {
+      render(<UseUpdatesTestApp />);
+      const updateIdView = await screen.findByTestId('currentlyRunning_updateId');
+      expect(updateIdView).toHaveTextContent('0000-1111');
+      const createdAtView = await screen.findByTestId('currentlyRunning_createdAt');
+      expect(createdAtView).toHaveTextContent('2023-03-26T04:58:02.560Z');
+      const channelView = await screen.findByTestId('currentlyRunning_channel');
+      expect(channelView).toHaveTextContent('main');
+    });
+
+    it('Shows available update after running checkForUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      const mockDate = new Date();
+      const mockManifest = {
+        id: '0000-2222',
+        createdAt: mockDate.toISOString(),
+        runtimeVersion: '1.0.0',
+        launchAsset: {
+          url: 'testUrl',
+        },
+        assets: [],
+        metadata: {},
+      };
+      ExpoUpdates.checkForUpdateAsync.mockReturnValueOnce({
+        isAvailable: true,
+        manifest: mockManifest,
+      });
+      const buttonView = await screen.findByTestId('checkForUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      const lastCheckForUpdateTime = new Date();
+      const updateIdView = await screen.findByTestId('availableUpdate_updateId');
+      expect(updateIdView).toHaveTextContent('0000-2222');
+      const lastCheckForUpdateTimeView = await screen.findByTestId('lastCheckForUpdateTime');
+      expect(lastCheckForUpdateTimeView).toHaveTextContent(
+        // truncate the fractional part of the seconds value in the time
+        lastCheckForUpdateTime.toISOString().substring(0, 19)
+      );
+      expect(callbacks.onCheckForUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onCheckForUpdateComplete).toHaveBeenCalledTimes(1);
+      expect(callbacks.onCheckForUpdateError).not.toHaveBeenCalled();
+    });
+
+    it('Shows available update after UpdateEvent fired', async () => {
+      render(<UseUpdatesTestApp />);
+      const mockDate = new Date();
+      const mockManifest = {
+        id: '0000-2222',
+        createdAt: mockDate.toISOString(),
+        runtimeVersion: '1.0.0',
+        launchAsset: {
+          url: 'testUrl',
+        },
+        assets: [],
+        metadata: {},
+      };
+      const event: UpdateEvent = {
+        type: UpdateEventType.UPDATE_AVAILABLE,
+        manifest: mockManifest,
+      };
+      await act(async () => {
+        emitEvent(event);
+      });
+      const lastCheckForUpdateTime = new Date();
+      const updateIdView = await screen.findByTestId('availableUpdate_updateId');
+      expect(updateIdView).toHaveTextContent('0000-2222');
+      const lastCheckForUpdateTimeView = await screen.findByTestId('lastCheckForUpdateTime');
+      expect(lastCheckForUpdateTimeView).toHaveTextContent(
+        // truncate the fractional part of the seconds value in the time
+        lastCheckForUpdateTime.toISOString().substring(0, 19)
+      );
+    });
+
+    it('Shows no available update after running checkForUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      ExpoUpdates.checkForUpdateAsync.mockReturnValueOnce({
+        isAvailable: false,
+      });
+      const buttonView = await screen.findByTestId('checkForUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      const updateIdView = await screen.findByTestId('availableUpdate_updateId');
+      // No update so text is empty
+      expect(updateIdView).toHaveTextContent('');
+      const lastCheckForUpdateTime = new Date();
+      const lastCheckForUpdateTimeView = await screen.findByTestId('lastCheckForUpdateTime');
+      expect(lastCheckForUpdateTimeView).toHaveTextContent(
+        // truncate the fractional part of the seconds value in the time
+        lastCheckForUpdateTime.toISOString().substring(0, 19)
+      );
+      expect(callbacks.onCheckForUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onCheckForUpdateComplete).toHaveBeenCalledTimes(1);
+      expect(callbacks.onCheckForUpdateError).not.toHaveBeenCalled();
+    });
+
+    it('Handles error in checkForUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      const mockError = { code: 'ERR_TEST', message: 'test message' };
+      ExpoUpdates.checkForUpdateAsync.mockRejectedValueOnce(mockError);
+      const buttonView = await screen.findByTestId('checkForUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      const errorView = await screen.findByTestId('error');
+      expect(errorView).toHaveTextContent('{"code":"ERR_TEST","message":"test message"}');
+      expect(callbacks.onCheckForUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onCheckForUpdateComplete).not.toHaveBeenCalled();
+      expect(callbacks.onCheckForUpdateError).toHaveBeenCalledWith(mockError);
+    });
+
+    it('Calls callbacks during downloadUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      ExpoUpdates.fetchUpdateAsync.mockReturnValueOnce({
+        isNew: true,
+        manifestString: '{"name": "test"}',
+      });
+      const buttonView = await screen.findByTestId('downloadUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      expect(callbacks.onDownloadUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onDownloadUpdateComplete).toHaveBeenCalledTimes(1);
+      expect(callbacks.onDownloadUpdateError).not.toHaveBeenCalled();
+    });
+
+    it('Handles error during downloadUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      const mockError = { code: 'ERR_TEST', message: 'test message' };
+      ExpoUpdates.fetchUpdateAsync.mockRejectedValueOnce(mockError);
+      const buttonView = await screen.findByTestId('downloadUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      const errorView = await screen.findByTestId('error');
+      expect(errorView).toHaveTextContent('{"code":"ERR_TEST","message":"test message"}');
+      expect(callbacks.onDownloadUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onDownloadUpdateComplete).not.toHaveBeenCalled();
+      expect(callbacks.onDownloadUpdateError).toHaveBeenCalledWith(mockError);
+    });
+
+    it('Calls callbacks during downloadAndRunUpdate()', async () => {
+      const callbacks = getCallbacks();
+      render(<UseUpdatesTestApp callbacks={callbacks} />);
+      ExpoUpdates.fetchUpdateAsync.mockReturnValueOnce({
+        isNew: true,
+        manifestString: '{"name": "test"}',
+      });
+      ExpoUpdates.reload.mockReturnValueOnce('');
+      const buttonView = await screen.findByTestId('downloadAndRunUpdate');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      expect(callbacks.onDownloadUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onDownloadUpdateComplete).toHaveBeenCalledTimes(1);
+      expect(callbacks.onDownloadUpdateError).not.toHaveBeenCalled();
+      expect(callbacks.onRunUpdateStart).toHaveBeenCalledTimes(1);
+      expect(callbacks.onRunUpdateError).not.toHaveBeenCalled();
+    });
+
+    it('Shows log entries after running readLogEntries()', async () => {
+      ExpoUpdates.readLogEntriesAsync.mockReturnValueOnce([
+        {
+          timestamp: 100,
+          message: 'Message 1',
+          code: UpdatesLogEntryCode.NONE,
+          level: UpdatesLogEntryLevel.INFO,
+        },
+      ]);
+      render(<UseUpdatesTestApp />);
+      const buttonView = await screen.findByTestId('readLogEntries');
+      await act(async () => {
+        fireEvent(buttonView, 'press');
+      });
+      const logEntryView = await screen.findByTestId('logEntry');
+      expect(logEntryView).toHaveTextContent('Message 1');
+    });
+  });
+
+  describe('Test individual methods', () => {
+    const mockDate = new Date();
+    const manifest: Manifest = {
+      id: '0000-2222',
+      createdAt: mockDate.toISOString(),
+      runtimeVersion: '1.0.0',
+      launchAsset: {
+        url: 'testUrl',
+      },
+      assets: [],
+      metadata: {},
+    };
+
+    it('availableUpdateFromManifest() with a manifest', () => {
+      const result = availableUpdateFromManifest(manifest);
+      expect(result?.updateId).toEqual('0000-2222');
+      expect(result?.createdAt).toEqual(mockDate);
+      expect(result?.manifest).toEqual(manifest);
+    });
+
+    it('availableUpdateFromManifest() with undefined manifest', () => {
+      const result = availableUpdateFromManifest(undefined);
+      expect(result).toBeUndefined();
+    });
+
+    it('updatesInfoFromEvent() returns mutated info as expected', () => {
+      // Available
+      let event: UpdateEvent = {
+        type: UpdateEventType.UPDATE_AVAILABLE,
+        manifest,
+      };
+      let updatesInfo = updatesInfoFromEvent(undefined, event);
+      expect(updatesInfo.currentlyRunning.updateId).toEqual('0000-1111');
+      expect(updatesInfo.availableUpdate?.updateId).toEqual('0000-2222');
+      expect(updatesInfo.error).toBeUndefined();
+      // Not available
+      event = { type: UpdateEventType.NO_UPDATE_AVAILABLE };
+      updatesInfo = updatesInfoFromEvent(updatesInfo, event);
+      expect(updatesInfo.currentlyRunning.updateId).toEqual('0000-1111');
+      expect(updatesInfo.availableUpdate).toBeUndefined();
+      expect(updatesInfo.error).toBeUndefined();
+      // Error
+      event = { type: UpdateEventType.ERROR, message: 'It broke' };
+      updatesInfo = updatesInfoFromEvent(updatesInfo, event);
+      expect(updatesInfo.currentlyRunning.updateId).toEqual('0000-1111');
+      expect(updatesInfo.availableUpdate).toBeUndefined();
+      expect(updatesInfo.error?.message).toEqual('It broke');
+      // Back to available
+      event = {
+        type: UpdateEventType.UPDATE_AVAILABLE,
+        manifest,
+      };
+      updatesInfo = updatesInfoFromEvent(undefined, event);
+      expect(updatesInfo.currentlyRunning.updateId).toEqual('0000-1111');
+      expect(updatesInfo.availableUpdate?.updateId).toEqual('0000-2222');
+      updatesInfo = updatesInfoFromEvent(undefined, event);
+      expect(updatesInfo.currentlyRunning.updateId).toEqual('0000-1111');
+      expect(updatesInfo.availableUpdate?.updateId).toEqual('0000-2222');
+      expect(updatesInfo.error).toBeUndefined();
+    });
+  });
+});
diff --git a/node_modules/expo-updates/src/__tests__/UseUpdatesTestApp.tsx b/node_modules/expo-updates/src/__tests__/UseUpdatesTestApp.tsx
new file mode 100644
index 0000000..f09138f
--- /dev/null
+++ b/node_modules/expo-updates/src/__tests__/UseUpdatesTestApp.tsx
@@ -0,0 +1,45 @@
+import React from 'react';
+import { View, Text, Pressable } from 'react-native';
+
+import * as Updates from '..';
+import { UseUpdatesCallbacksType } from '..';
+
+const { useUpdates } = Updates;
+
+const UseUpdatesTestApp = (props: { callbacks?: UseUpdatesCallbacksType }) => {
+  const { updatesInfo, checkForUpdate, downloadUpdate, downloadAndRunUpdate, readLogEntries } =
+    useUpdates(props.callbacks);
+  return (
+    <View>
+      {/* Currently running info */}
+      <Text testID="currentlyRunning_updateId">{updatesInfo.currentlyRunning.updateId}</Text>
+      <Text testID="currentlyRunning_channel">{updatesInfo.currentlyRunning.channel}</Text>
+      <Text testID="currentlyRunning_createdAt">
+        {updatesInfo.currentlyRunning?.createdAt
+          ? updatesInfo.currentlyRunning?.createdAt.toISOString()
+          : ''}
+      </Text>
+      {/* Last time there was a check for update */}
+      <Text testID="lastCheckForUpdateTime">
+        {updatesInfo?.lastCheckForUpdateTimeSinceRestart?.toISOString().substring(0, 19) || ''}
+      </Text>
+      {/* Available update, if one is present */}
+      <Text testID="availableUpdate_updateId">{updatesInfo.availableUpdate?.updateId || ''}</Text>
+      {/* Log entries, if they have been read */}
+      {(updatesInfo.logEntries?.length || 0) > 0 ? (
+        <Text testID="logEntry">
+          {JSON.stringify(updatesInfo?.logEntries ? updatesInfo?.logEntries[0].message : '') || ''}
+        </Text>
+      ) : null}
+      {/* Error, if one has occurred */}
+      {updatesInfo?.error ? <Text testID="error">{JSON.stringify(updatesInfo?.error)}</Text> : null}
+      {/* Buttons for test code to invoke methods */}
+      <Pressable testID="checkForUpdate" onPress={() => checkForUpdate()} />
+      <Pressable testID="downloadUpdate" onPress={() => downloadUpdate()} />
+      <Pressable testID="downloadAndRunUpdate" onPress={() => downloadAndRunUpdate()} />
+      <Pressable testID="readLogEntries" onPress={() => readLogEntries()} />
+    </View>
+  );
+};
+
+export default UseUpdatesTestApp;
diff --git a/node_modules/expo-updates/src/index.ts b/node_modules/expo-updates/src/index.ts
index ad39cc8..dc92f6c 100644
--- a/node_modules/expo-updates/src/index.ts
+++ b/node_modules/expo-updates/src/index.ts
@@ -1,2 +1,10 @@
 export * from './Updates';
 export * from './UpdatesHooks';
+export type {
+  UpdatesInfo,
+  UseUpdatesCallbacksType,
+  UseUpdatesReturnType,
+  CurrentlyRunningInfo,
+  AvailableUpdateInfo,
+} from './UseUpdates.types';
+export * from './UseUpdates';
